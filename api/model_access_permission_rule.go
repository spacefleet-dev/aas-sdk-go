//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AccessPermissionRule struct for AccessPermissionRule
type AccessPermissionRule struct {
	Extensions              []Extension            `json:"extensions,omitempty"`
	Category                *string                `json:"category,omitempty"`
	Checksum                *string                `json:"checksum,omitempty"`
	Description             []LangString           `json:"description,omitempty"`
	DisplayName             []LangString           `json:"displayName,omitempty"`
	IdShort                 *string                `json:"idShort,omitempty"`
	ModelType               ModelType              `json:"modelType"`
	Qualifiers              []Qualifier            `json:"qualifiers,omitempty"`
	PermissionsPerObject    []PermissionsPerObject `json:"permissionsPerObject,omitempty"`
	TargetSubjectAttributes []SubjectAttributes    `json:"targetSubjectAttributes"`
}

// NewAccessPermissionRule instantiates a new AccessPermissionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPermissionRule(modelType ModelType, targetSubjectAttributes []SubjectAttributes) *AccessPermissionRule {
	this := AccessPermissionRule{}
	this.ModelType = modelType
	this.TargetSubjectAttributes = targetSubjectAttributes
	return &this
}

// NewAccessPermissionRuleWithDefaults instantiates a new AccessPermissionRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPermissionRuleWithDefaults() *AccessPermissionRule {
	this := AccessPermissionRule{}
	return &this
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetExtensions() []Extension {
	if o == nil || o.Extensions == nil {
		var ret []Extension
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetExtensionsOk() ([]Extension, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []Extension and assigns it to the Extensions field.
func (o *AccessPermissionRule) SetExtensions(v []Extension) {
	o.Extensions = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AccessPermissionRule) SetCategory(v string) {
	o.Category = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *AccessPermissionRule) SetChecksum(v string) {
	o.Checksum = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetDescription() []LangString {
	if o == nil || o.Description == nil {
		var ret []LangString
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetDescriptionOk() ([]LangString, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given []LangString and assigns it to the Description field.
func (o *AccessPermissionRule) SetDescription(v []LangString) {
	o.Description = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetDisplayName() []LangString {
	if o == nil || o.DisplayName == nil {
		var ret []LangString
		return ret
	}
	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetDisplayNameOk() ([]LangString, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given []LangString and assigns it to the DisplayName field.
func (o *AccessPermissionRule) SetDisplayName(v []LangString) {
	o.DisplayName = v
}

// GetIdShort returns the IdShort field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetIdShort() string {
	if o == nil || o.IdShort == nil {
		var ret string
		return ret
	}
	return *o.IdShort
}

// GetIdShortOk returns a tuple with the IdShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetIdShortOk() (*string, bool) {
	if o == nil || o.IdShort == nil {
		return nil, false
	}
	return o.IdShort, true
}

// HasIdShort returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasIdShort() bool {
	if o != nil && o.IdShort != nil {
		return true
	}

	return false
}

// SetIdShort gets a reference to the given string and assigns it to the IdShort field.
func (o *AccessPermissionRule) SetIdShort(v string) {
	o.IdShort = &v
}

// GetModelType returns the ModelType field value
func (o *AccessPermissionRule) GetModelType() ModelType {
	if o == nil {
		var ret ModelType
		return ret
	}

	return o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetModelTypeOk() (*ModelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelType, true
}

// SetModelType sets field value
func (o *AccessPermissionRule) SetModelType(v ModelType) {
	o.ModelType = v
}

// GetQualifiers returns the Qualifiers field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetQualifiers() []Qualifier {
	if o == nil || o.Qualifiers == nil {
		var ret []Qualifier
		return ret
	}
	return o.Qualifiers
}

// GetQualifiersOk returns a tuple with the Qualifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetQualifiersOk() ([]Qualifier, bool) {
	if o == nil || o.Qualifiers == nil {
		return nil, false
	}
	return o.Qualifiers, true
}

// HasQualifiers returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasQualifiers() bool {
	if o != nil && o.Qualifiers != nil {
		return true
	}

	return false
}

// SetQualifiers gets a reference to the given []Qualifier and assigns it to the Qualifiers field.
func (o *AccessPermissionRule) SetQualifiers(v []Qualifier) {
	o.Qualifiers = v
}

// GetPermissionsPerObject returns the PermissionsPerObject field value if set, zero value otherwise.
func (o *AccessPermissionRule) GetPermissionsPerObject() []PermissionsPerObject {
	if o == nil || o.PermissionsPerObject == nil {
		var ret []PermissionsPerObject
		return ret
	}
	return o.PermissionsPerObject
}

// GetPermissionsPerObjectOk returns a tuple with the PermissionsPerObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetPermissionsPerObjectOk() ([]PermissionsPerObject, bool) {
	if o == nil || o.PermissionsPerObject == nil {
		return nil, false
	}
	return o.PermissionsPerObject, true
}

// HasPermissionsPerObject returns a boolean if a field has been set.
func (o *AccessPermissionRule) HasPermissionsPerObject() bool {
	if o != nil && o.PermissionsPerObject != nil {
		return true
	}

	return false
}

// SetPermissionsPerObject gets a reference to the given []PermissionsPerObject and assigns it to the PermissionsPerObject field.
func (o *AccessPermissionRule) SetPermissionsPerObject(v []PermissionsPerObject) {
	o.PermissionsPerObject = v
}

// GetTargetSubjectAttributes returns the TargetSubjectAttributes field value
func (o *AccessPermissionRule) GetTargetSubjectAttributes() []SubjectAttributes {
	if o == nil {
		var ret []SubjectAttributes
		return ret
	}

	return o.TargetSubjectAttributes
}

// GetTargetSubjectAttributesOk returns a tuple with the TargetSubjectAttributes field value
// and a boolean to check if the value has been set.
func (o *AccessPermissionRule) GetTargetSubjectAttributesOk() ([]SubjectAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetSubjectAttributes, true
}

// SetTargetSubjectAttributes sets field value
func (o *AccessPermissionRule) SetTargetSubjectAttributes(v []SubjectAttributes) {
	o.TargetSubjectAttributes = v
}

func (o AccessPermissionRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.IdShort != nil {
		toSerialize["idShort"] = o.IdShort
	}
	if true {
		toSerialize["modelType"] = o.ModelType
	}
	if o.Qualifiers != nil {
		toSerialize["qualifiers"] = o.Qualifiers
	}
	if o.PermissionsPerObject != nil {
		toSerialize["permissionsPerObject"] = o.PermissionsPerObject
	}
	if true {
		toSerialize["targetSubjectAttributes"] = o.TargetSubjectAttributes
	}
	return json.Marshal(toSerialize)
}

type NullableAccessPermissionRule struct {
	value *AccessPermissionRule
	isSet bool
}

func (v NullableAccessPermissionRule) Get() *AccessPermissionRule {
	return v.value
}

func (v *NullableAccessPermissionRule) Set(val *AccessPermissionRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPermissionRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPermissionRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPermissionRule(val *AccessPermissionRule) *NullableAccessPermissionRule {
	return &NullableAccessPermissionRule{value: val, isSet: true}
}

func (v NullableAccessPermissionRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPermissionRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
