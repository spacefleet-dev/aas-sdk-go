/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AdministrativeInformation struct for AdministrativeInformation
type AdministrativeInformation struct {
	EmbeddedDataSpecifications []EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	Revision                   *string                     `json:"revision,omitempty"`
	Version                    *string                     `json:"version,omitempty"`
}

// NewAdministrativeInformation instantiates a new AdministrativeInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministrativeInformation() *AdministrativeInformation {
	this := AdministrativeInformation{}
	return &this
}

// NewAdministrativeInformationWithDefaults instantiates a new AdministrativeInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministrativeInformationWithDefaults() *AdministrativeInformation {
	this := AdministrativeInformation{}
	return &this
}

// GetEmbeddedDataSpecifications returns the EmbeddedDataSpecifications field value if set, zero value otherwise.
func (o *AdministrativeInformation) GetEmbeddedDataSpecifications() []EmbeddedDataSpecification {
	if o == nil || o.EmbeddedDataSpecifications == nil {
		var ret []EmbeddedDataSpecification
		return ret
	}
	return o.EmbeddedDataSpecifications
}

// GetEmbeddedDataSpecificationsOk returns a tuple with the EmbeddedDataSpecifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministrativeInformation) GetEmbeddedDataSpecificationsOk() ([]EmbeddedDataSpecification, bool) {
	if o == nil || o.EmbeddedDataSpecifications == nil {
		return nil, false
	}
	return o.EmbeddedDataSpecifications, true
}

// HasEmbeddedDataSpecifications returns a boolean if a field has been set.
func (o *AdministrativeInformation) HasEmbeddedDataSpecifications() bool {
	if o != nil && o.EmbeddedDataSpecifications != nil {
		return true
	}

	return false
}

// SetEmbeddedDataSpecifications gets a reference to the given []EmbeddedDataSpecification and assigns it to the EmbeddedDataSpecifications field.
func (o *AdministrativeInformation) SetEmbeddedDataSpecifications(v []EmbeddedDataSpecification) {
	o.EmbeddedDataSpecifications = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *AdministrativeInformation) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministrativeInformation) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *AdministrativeInformation) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *AdministrativeInformation) SetRevision(v string) {
	o.Revision = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AdministrativeInformation) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministrativeInformation) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AdministrativeInformation) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AdministrativeInformation) SetVersion(v string) {
	o.Version = &v
}

func (o AdministrativeInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmbeddedDataSpecifications != nil {
		toSerialize["embeddedDataSpecifications"] = o.EmbeddedDataSpecifications
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAdministrativeInformation struct {
	value *AdministrativeInformation
	isSet bool
}

func (v NullableAdministrativeInformation) Get() *AdministrativeInformation {
	return v.value
}

func (v *NullableAdministrativeInformation) Set(val *AdministrativeInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministrativeInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministrativeInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministrativeInformation(val *AdministrativeInformation) *NullableAdministrativeInformation {
	return &NullableAdministrativeInformation{value: val, isSet: true}
}

func (v NullableAdministrativeInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministrativeInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
