//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Asset struct for Asset
type Asset struct {
	Administration             *AdministrativeInformation   `json:"administration,omitempty"`
	AssetIdentificationModel   *SubmodelReference           `json:"assetIdentificationModel,omitempty"`
	BillOfMaterial             *SubmodelReference           `json:"billOfMaterial,omitempty"`
	Category                   NullableString               `json:"category,omitempty"`
	Description                []LangString                 `json:"description,omitempty"`
	EmbeddedDataSpecifications []IEmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	IdShort                    NullableString               `json:"idShort,omitempty"`
	Identification             *Identifier                  `json:"identification,omitempty"`
	Kind                       *AssetKind                   `json:"kind,omitempty"`
	ModelType                  *ModelType                   `json:"modelType,omitempty"`
}

// NewAsset instantiates a new Asset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsset() *Asset {
	this := Asset{}
	return &this
}

// NewAssetWithDefaults instantiates a new Asset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetWithDefaults() *Asset {
	this := Asset{}
	return &this
}

// GetAdministration returns the Administration field value if set, zero value otherwise.
func (o *Asset) GetAdministration() AdministrativeInformation {
	if o == nil || o.Administration == nil {
		var ret AdministrativeInformation
		return ret
	}
	return *o.Administration
}

// GetAdministrationOk returns a tuple with the Administration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetAdministrationOk() (*AdministrativeInformation, bool) {
	if o == nil || o.Administration == nil {
		return nil, false
	}
	return o.Administration, true
}

// HasAdministration returns a boolean if a field has been set.
func (o *Asset) HasAdministration() bool {
	if o != nil && o.Administration != nil {
		return true
	}

	return false
}

// SetAdministration gets a reference to the given AdministrativeInformation and assigns it to the Administration field.
func (o *Asset) SetAdministration(v AdministrativeInformation) {
	o.Administration = &v
}

// GetAssetIdentificationModel returns the AssetIdentificationModel field value if set, zero value otherwise.
func (o *Asset) GetAssetIdentificationModel() SubmodelReference {
	if o == nil || o.AssetIdentificationModel == nil {
		var ret SubmodelReference
		return ret
	}
	return *o.AssetIdentificationModel
}

// GetAssetIdentificationModelOk returns a tuple with the AssetIdentificationModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetAssetIdentificationModelOk() (*SubmodelReference, bool) {
	if o == nil || o.AssetIdentificationModel == nil {
		return nil, false
	}
	return o.AssetIdentificationModel, true
}

// HasAssetIdentificationModel returns a boolean if a field has been set.
func (o *Asset) HasAssetIdentificationModel() bool {
	if o != nil && o.AssetIdentificationModel != nil {
		return true
	}

	return false
}

// SetAssetIdentificationModel gets a reference to the given SubmodelReference and assigns it to the AssetIdentificationModel field.
func (o *Asset) SetAssetIdentificationModel(v SubmodelReference) {
	o.AssetIdentificationModel = &v
}

// GetBillOfMaterial returns the BillOfMaterial field value if set, zero value otherwise.
func (o *Asset) GetBillOfMaterial() SubmodelReference {
	if o == nil || o.BillOfMaterial == nil {
		var ret SubmodelReference
		return ret
	}
	return *o.BillOfMaterial
}

// GetBillOfMaterialOk returns a tuple with the BillOfMaterial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetBillOfMaterialOk() (*SubmodelReference, bool) {
	if o == nil || o.BillOfMaterial == nil {
		return nil, false
	}
	return o.BillOfMaterial, true
}

// HasBillOfMaterial returns a boolean if a field has been set.
func (o *Asset) HasBillOfMaterial() bool {
	if o != nil && o.BillOfMaterial != nil {
		return true
	}

	return false
}

// SetBillOfMaterial gets a reference to the given SubmodelReference and assigns it to the BillOfMaterial field.
func (o *Asset) SetBillOfMaterial(v SubmodelReference) {
	o.BillOfMaterial = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *Asset) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *Asset) SetCategory(v string) {
	o.Category.Set(&v)
}

// SetCategoryNil sets the value for Category to be an explicit nil
func (o *Asset) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *Asset) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetDescription() []LangString {
	if o == nil {
		var ret []LangString
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetDescriptionOk() ([]LangString, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Asset) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given []LangString and assigns it to the Description field.
func (o *Asset) SetDescription(v []LangString) {
	o.Description = v
}

// GetEmbeddedDataSpecifications returns the EmbeddedDataSpecifications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetEmbeddedDataSpecifications() []IEmbeddedDataSpecification {
	if o == nil {
		var ret []IEmbeddedDataSpecification
		return ret
	}
	return o.EmbeddedDataSpecifications
}

// GetEmbeddedDataSpecificationsOk returns a tuple with the EmbeddedDataSpecifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetEmbeddedDataSpecificationsOk() ([]IEmbeddedDataSpecification, bool) {
	if o == nil || o.EmbeddedDataSpecifications == nil {
		return nil, false
	}
	return o.EmbeddedDataSpecifications, true
}

// HasEmbeddedDataSpecifications returns a boolean if a field has been set.
func (o *Asset) HasEmbeddedDataSpecifications() bool {
	if o != nil && o.EmbeddedDataSpecifications != nil {
		return true
	}

	return false
}

// SetEmbeddedDataSpecifications gets a reference to the given []IEmbeddedDataSpecification and assigns it to the EmbeddedDataSpecifications field.
func (o *Asset) SetEmbeddedDataSpecifications(v []IEmbeddedDataSpecification) {
	o.EmbeddedDataSpecifications = v
}

// GetIdShort returns the IdShort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Asset) GetIdShort() string {
	if o == nil || o.IdShort.Get() == nil {
		var ret string
		return ret
	}
	return *o.IdShort.Get()
}

// GetIdShortOk returns a tuple with the IdShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Asset) GetIdShortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdShort.Get(), o.IdShort.IsSet()
}

// HasIdShort returns a boolean if a field has been set.
func (o *Asset) HasIdShort() bool {
	if o != nil && o.IdShort.IsSet() {
		return true
	}

	return false
}

// SetIdShort gets a reference to the given NullableString and assigns it to the IdShort field.
func (o *Asset) SetIdShort(v string) {
	o.IdShort.Set(&v)
}

// SetIdShortNil sets the value for IdShort to be an explicit nil
func (o *Asset) SetIdShortNil() {
	o.IdShort.Set(nil)
}

// UnsetIdShort ensures that no value is present for IdShort, not even an explicit nil
func (o *Asset) UnsetIdShort() {
	o.IdShort.Unset()
}

// GetIdentification returns the Identification field value if set, zero value otherwise.
func (o *Asset) GetIdentification() Identifier {
	if o == nil || o.Identification == nil {
		var ret Identifier
		return ret
	}
	return *o.Identification
}

// GetIdentificationOk returns a tuple with the Identification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetIdentificationOk() (*Identifier, bool) {
	if o == nil || o.Identification == nil {
		return nil, false
	}
	return o.Identification, true
}

// HasIdentification returns a boolean if a field has been set.
func (o *Asset) HasIdentification() bool {
	if o != nil && o.Identification != nil {
		return true
	}

	return false
}

// SetIdentification gets a reference to the given Identifier and assigns it to the Identification field.
func (o *Asset) SetIdentification(v Identifier) {
	o.Identification = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Asset) GetKind() AssetKind {
	if o == nil || o.Kind == nil {
		var ret AssetKind
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetKindOk() (*AssetKind, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Asset) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given AssetKind and assigns it to the Kind field.
func (o *Asset) SetKind(v AssetKind) {
	o.Kind = &v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *Asset) GetModelType() ModelType {
	if o == nil || o.ModelType == nil {
		var ret ModelType
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetModelTypeOk() (*ModelType, bool) {
	if o == nil || o.ModelType == nil {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *Asset) HasModelType() bool {
	if o != nil && o.ModelType != nil {
		return true
	}

	return false
}

// SetModelType gets a reference to the given ModelType and assigns it to the ModelType field.
func (o *Asset) SetModelType(v ModelType) {
	o.ModelType = &v
}

func (o Asset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Administration != nil {
		toSerialize["administration"] = o.Administration
	}
	if o.AssetIdentificationModel != nil {
		toSerialize["assetIdentificationModel"] = o.AssetIdentificationModel
	}
	if o.BillOfMaterial != nil {
		toSerialize["billOfMaterial"] = o.BillOfMaterial
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EmbeddedDataSpecifications != nil {
		toSerialize["embeddedDataSpecifications"] = o.EmbeddedDataSpecifications
	}
	if o.IdShort.IsSet() {
		toSerialize["idShort"] = o.IdShort.Get()
	}
	if o.Identification != nil {
		toSerialize["identification"] = o.Identification
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.ModelType != nil {
		toSerialize["modelType"] = o.ModelType
	}
	return json.Marshal(toSerialize)
}

type NullableAsset struct {
	value *Asset
	isSet bool
}

func (v NullableAsset) Get() *Asset {
	return v.value
}

func (v *NullableAsset) Set(val *Asset) {
	v.value = val
	v.isSet = true
}

func (v NullableAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsset(val *Asset) *NullableAsset {
	return &NullableAsset{value: val, isSet: true}
}

func (v NullableAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
