//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AssetInformation struct for AssetInformation
type AssetInformation struct {
	AssetKind        AssetKind         `json:"assetKind"`
	DefaultThumbnail *Resource         `json:"defaultThumbnail,omitempty"`
	GlobalAssetId    *Reference        `json:"globalAssetId,omitempty"`
	SpecificAssetIds []SpecificAssetId `json:"specificAssetIds,omitempty"`
}

// NewAssetInformation instantiates a new AssetInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetInformation(assetKind AssetKind) *AssetInformation {
	this := AssetInformation{}
	this.AssetKind = assetKind
	return &this
}

// NewAssetInformationWithDefaults instantiates a new AssetInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetInformationWithDefaults() *AssetInformation {
	this := AssetInformation{}
	return &this
}

// GetAssetKind returns the AssetKind field value
func (o *AssetInformation) GetAssetKind() AssetKind {
	if o == nil {
		var ret AssetKind
		return ret
	}

	return o.AssetKind
}

// GetAssetKindOk returns a tuple with the AssetKind field value
// and a boolean to check if the value has been set.
func (o *AssetInformation) GetAssetKindOk() (*AssetKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetKind, true
}

// SetAssetKind sets field value
func (o *AssetInformation) SetAssetKind(v AssetKind) {
	o.AssetKind = v
}

// GetDefaultThumbnail returns the DefaultThumbnail field value if set, zero value otherwise.
func (o *AssetInformation) GetDefaultThumbnail() Resource {
	if o == nil || o.DefaultThumbnail == nil {
		var ret Resource
		return ret
	}
	return *o.DefaultThumbnail
}

// GetDefaultThumbnailOk returns a tuple with the DefaultThumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInformation) GetDefaultThumbnailOk() (*Resource, bool) {
	if o == nil || o.DefaultThumbnail == nil {
		return nil, false
	}
	return o.DefaultThumbnail, true
}

// HasDefaultThumbnail returns a boolean if a field has been set.
func (o *AssetInformation) HasDefaultThumbnail() bool {
	if o != nil && o.DefaultThumbnail != nil {
		return true
	}

	return false
}

// SetDefaultThumbnail gets a reference to the given Resource and assigns it to the DefaultThumbnail field.
func (o *AssetInformation) SetDefaultThumbnail(v Resource) {
	o.DefaultThumbnail = &v
}

// GetGlobalAssetId returns the GlobalAssetId field value if set, zero value otherwise.
func (o *AssetInformation) GetGlobalAssetId() Reference {
	if o == nil || o.GlobalAssetId == nil {
		var ret Reference
		return ret
	}
	return *o.GlobalAssetId
}

// GetGlobalAssetIdOk returns a tuple with the GlobalAssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInformation) GetGlobalAssetIdOk() (*Reference, bool) {
	if o == nil || o.GlobalAssetId == nil {
		return nil, false
	}
	return o.GlobalAssetId, true
}

// HasGlobalAssetId returns a boolean if a field has been set.
func (o *AssetInformation) HasGlobalAssetId() bool {
	if o != nil && o.GlobalAssetId != nil {
		return true
	}

	return false
}

// SetGlobalAssetId gets a reference to the given Reference and assigns it to the GlobalAssetId field.
func (o *AssetInformation) SetGlobalAssetId(v Reference) {
	o.GlobalAssetId = &v
}

// GetSpecificAssetIds returns the SpecificAssetIds field value if set, zero value otherwise.
func (o *AssetInformation) GetSpecificAssetIds() []SpecificAssetId {
	if o == nil || o.SpecificAssetIds == nil {
		var ret []SpecificAssetId
		return ret
	}
	return o.SpecificAssetIds
}

// GetSpecificAssetIdsOk returns a tuple with the SpecificAssetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetInformation) GetSpecificAssetIdsOk() ([]SpecificAssetId, bool) {
	if o == nil || o.SpecificAssetIds == nil {
		return nil, false
	}
	return o.SpecificAssetIds, true
}

// HasSpecificAssetIds returns a boolean if a field has been set.
func (o *AssetInformation) HasSpecificAssetIds() bool {
	if o != nil && o.SpecificAssetIds != nil {
		return true
	}

	return false
}

// SetSpecificAssetIds gets a reference to the given []SpecificAssetId and assigns it to the SpecificAssetIds field.
func (o *AssetInformation) SetSpecificAssetIds(v []SpecificAssetId) {
	o.SpecificAssetIds = v
}

func (o AssetInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assetKind"] = o.AssetKind
	}
	if o.DefaultThumbnail != nil {
		toSerialize["defaultThumbnail"] = o.DefaultThumbnail
	}
	if o.GlobalAssetId != nil {
		toSerialize["globalAssetId"] = o.GlobalAssetId
	}
	if o.SpecificAssetIds != nil {
		toSerialize["specificAssetIds"] = o.SpecificAssetIds
	}
	return json.Marshal(toSerialize)
}

type NullableAssetInformation struct {
	value *AssetInformation
	isSet bool
}

func (v NullableAssetInformation) Get() *AssetInformation {
	return v.value
}

func (v *NullableAssetInformation) Set(val *AssetInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetInformation(val *AssetInformation) *NullableAssetInformation {
	return &NullableAssetInformation{value: val, isSet: true}
}

func (v NullableAssetInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
