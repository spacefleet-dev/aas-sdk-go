/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AssetKind the model 'AssetKind'
type AssetKind string

// List of AssetKind
const (
	ASSETKIND_INSTANCE AssetKind = "Instance"
	ASSETKIND_TYPE     AssetKind = "Type"
)

// All allowed values of AssetKind enum
var AllowedAssetKindEnumValues = []AssetKind{
	"Instance",
	"Type",
}

func (v *AssetKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetKind(value)
	for _, existing := range AllowedAssetKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetKind", value)
}

// NewAssetKindFromValue returns a pointer to a valid AssetKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetKindFromValue(v string) (*AssetKind, error) {
	ev := AssetKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetKind: valid values are %v", v, AllowedAssetKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetKind) IsValid() bool {
	for _, existing := range AllowedAssetKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetKind value
func (v AssetKind) Ptr() *AssetKind {
	return &v
}

type NullableAssetKind struct {
	value *AssetKind
	isSet bool
}

func (v NullableAssetKind) Get() *AssetKind {
	return v.value
}

func (v *NullableAssetKind) Set(val *AssetKind) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetKind) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetKind(val *AssetKind) *NullableAssetKind {
	return &NullableAssetKind{value: val, isSet: true}
}

func (v NullableAssetKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
