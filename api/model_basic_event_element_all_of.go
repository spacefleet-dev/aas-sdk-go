//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// BasicEventElementAllOf struct for BasicEventElementAllOf
type BasicEventElementAllOf struct {
	Direction     Direction    `json:"direction"`
	LastUpdate    *string      `json:"lastUpdate,omitempty"`
	MaxInterval   *string      `json:"maxInterval,omitempty"`
	MessageBroker *Reference   `json:"messageBroker,omitempty"`
	MessageTopic  *string      `json:"messageTopic,omitempty"`
	MinInterval   *string      `json:"minInterval,omitempty"`
	Observed      Reference    `json:"observed"`
	State         StateOfEvent `json:"state"`
}

// NewBasicEventElementAllOf instantiates a new BasicEventElementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicEventElementAllOf(direction Direction, observed Reference, state StateOfEvent) *BasicEventElementAllOf {
	this := BasicEventElementAllOf{}
	this.Direction = direction
	this.Observed = observed
	this.State = state
	return &this
}

// NewBasicEventElementAllOfWithDefaults instantiates a new BasicEventElementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicEventElementAllOfWithDefaults() *BasicEventElementAllOf {
	this := BasicEventElementAllOf{}
	return &this
}

// GetDirection returns the Direction field value
func (o *BasicEventElementAllOf) GetDirection() Direction {
	if o == nil {
		var ret Direction
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetDirectionOk() (*Direction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *BasicEventElementAllOf) SetDirection(v Direction) {
	o.Direction = v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *BasicEventElementAllOf) GetLastUpdate() string {
	if o == nil || o.LastUpdate == nil {
		var ret string
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetLastUpdateOk() (*string, bool) {
	if o == nil || o.LastUpdate == nil {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *BasicEventElementAllOf) HasLastUpdate() bool {
	if o != nil && o.LastUpdate != nil {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given string and assigns it to the LastUpdate field.
func (o *BasicEventElementAllOf) SetLastUpdate(v string) {
	o.LastUpdate = &v
}

// GetMaxInterval returns the MaxInterval field value if set, zero value otherwise.
func (o *BasicEventElementAllOf) GetMaxInterval() string {
	if o == nil || o.MaxInterval == nil {
		var ret string
		return ret
	}
	return *o.MaxInterval
}

// GetMaxIntervalOk returns a tuple with the MaxInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetMaxIntervalOk() (*string, bool) {
	if o == nil || o.MaxInterval == nil {
		return nil, false
	}
	return o.MaxInterval, true
}

// HasMaxInterval returns a boolean if a field has been set.
func (o *BasicEventElementAllOf) HasMaxInterval() bool {
	if o != nil && o.MaxInterval != nil {
		return true
	}

	return false
}

// SetMaxInterval gets a reference to the given string and assigns it to the MaxInterval field.
func (o *BasicEventElementAllOf) SetMaxInterval(v string) {
	o.MaxInterval = &v
}

// GetMessageBroker returns the MessageBroker field value if set, zero value otherwise.
func (o *BasicEventElementAllOf) GetMessageBroker() Reference {
	if o == nil || o.MessageBroker == nil {
		var ret Reference
		return ret
	}
	return *o.MessageBroker
}

// GetMessageBrokerOk returns a tuple with the MessageBroker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetMessageBrokerOk() (*Reference, bool) {
	if o == nil || o.MessageBroker == nil {
		return nil, false
	}
	return o.MessageBroker, true
}

// HasMessageBroker returns a boolean if a field has been set.
func (o *BasicEventElementAllOf) HasMessageBroker() bool {
	if o != nil && o.MessageBroker != nil {
		return true
	}

	return false
}

// SetMessageBroker gets a reference to the given Reference and assigns it to the MessageBroker field.
func (o *BasicEventElementAllOf) SetMessageBroker(v Reference) {
	o.MessageBroker = &v
}

// GetMessageTopic returns the MessageTopic field value if set, zero value otherwise.
func (o *BasicEventElementAllOf) GetMessageTopic() string {
	if o == nil || o.MessageTopic == nil {
		var ret string
		return ret
	}
	return *o.MessageTopic
}

// GetMessageTopicOk returns a tuple with the MessageTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetMessageTopicOk() (*string, bool) {
	if o == nil || o.MessageTopic == nil {
		return nil, false
	}
	return o.MessageTopic, true
}

// HasMessageTopic returns a boolean if a field has been set.
func (o *BasicEventElementAllOf) HasMessageTopic() bool {
	if o != nil && o.MessageTopic != nil {
		return true
	}

	return false
}

// SetMessageTopic gets a reference to the given string and assigns it to the MessageTopic field.
func (o *BasicEventElementAllOf) SetMessageTopic(v string) {
	o.MessageTopic = &v
}

// GetMinInterval returns the MinInterval field value if set, zero value otherwise.
func (o *BasicEventElementAllOf) GetMinInterval() string {
	if o == nil || o.MinInterval == nil {
		var ret string
		return ret
	}
	return *o.MinInterval
}

// GetMinIntervalOk returns a tuple with the MinInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetMinIntervalOk() (*string, bool) {
	if o == nil || o.MinInterval == nil {
		return nil, false
	}
	return o.MinInterval, true
}

// HasMinInterval returns a boolean if a field has been set.
func (o *BasicEventElementAllOf) HasMinInterval() bool {
	if o != nil && o.MinInterval != nil {
		return true
	}

	return false
}

// SetMinInterval gets a reference to the given string and assigns it to the MinInterval field.
func (o *BasicEventElementAllOf) SetMinInterval(v string) {
	o.MinInterval = &v
}

// GetObserved returns the Observed field value
func (o *BasicEventElementAllOf) GetObserved() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Observed
}

// GetObservedOk returns a tuple with the Observed field value
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetObservedOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Observed, true
}

// SetObserved sets field value
func (o *BasicEventElementAllOf) SetObserved(v Reference) {
	o.Observed = v
}

// GetState returns the State field value
func (o *BasicEventElementAllOf) GetState() StateOfEvent {
	if o == nil {
		var ret StateOfEvent
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *BasicEventElementAllOf) GetStateOk() (*StateOfEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *BasicEventElementAllOf) SetState(v StateOfEvent) {
	o.State = v
}

func (o BasicEventElementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["direction"] = o.Direction
	}
	if o.LastUpdate != nil {
		toSerialize["lastUpdate"] = o.LastUpdate
	}
	if o.MaxInterval != nil {
		toSerialize["maxInterval"] = o.MaxInterval
	}
	if o.MessageBroker != nil {
		toSerialize["messageBroker"] = o.MessageBroker
	}
	if o.MessageTopic != nil {
		toSerialize["messageTopic"] = o.MessageTopic
	}
	if o.MinInterval != nil {
		toSerialize["minInterval"] = o.MinInterval
	}
	if true {
		toSerialize["observed"] = o.Observed
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableBasicEventElementAllOf struct {
	value *BasicEventElementAllOf
	isSet bool
}

func (v NullableBasicEventElementAllOf) Get() *BasicEventElementAllOf {
	return v.value
}

func (v *NullableBasicEventElementAllOf) Set(val *BasicEventElementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicEventElementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicEventElementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicEventElementAllOf(val *BasicEventElementAllOf) *NullableBasicEventElementAllOf {
	return &NullableBasicEventElementAllOf{value: val, isSet: true}
}

func (v NullableBasicEventElementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicEventElementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
