/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DataSpecificationIEC61360ContentAllOf struct for DataSpecificationIEC61360ContentAllOf
type DataSpecificationIEC61360ContentAllOf struct {
	DataType           *string      `json:"dataType,omitempty"`
	Definition         []LangString `json:"definition,omitempty"`
	LevelType          []LevelType  `json:"levelType,omitempty"`
	PreferredName      []LangString `json:"preferredName"`
	ShortName          []LangString `json:"shortName,omitempty"`
	SourceOfDefinition *string      `json:"sourceOfDefinition,omitempty"`
	Symbol             *string      `json:"symbol,omitempty"`
	Unit               *string      `json:"unit,omitempty"`
	UnitId             *Reference   `json:"unitId,omitempty"`
	ValueFormat        *string      `json:"valueFormat,omitempty"`
	ValueList          *ValueList   `json:"valueList,omitempty"`
}

// NewDataSpecificationIEC61360ContentAllOf instantiates a new DataSpecificationIEC61360ContentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSpecificationIEC61360ContentAllOf(preferredName []LangString) *DataSpecificationIEC61360ContentAllOf {
	this := DataSpecificationIEC61360ContentAllOf{}
	this.PreferredName = preferredName
	return &this
}

// NewDataSpecificationIEC61360ContentAllOfWithDefaults instantiates a new DataSpecificationIEC61360ContentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSpecificationIEC61360ContentAllOfWithDefaults() *DataSpecificationIEC61360ContentAllOf {
	this := DataSpecificationIEC61360ContentAllOf{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *DataSpecificationIEC61360ContentAllOf) SetDataType(v string) {
	o.DataType = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetDefinition() []LangString {
	if o == nil || o.Definition == nil {
		var ret []LangString
		return ret
	}
	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetDefinitionOk() ([]LangString, bool) {
	if o == nil || o.Definition == nil {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasDefinition() bool {
	if o != nil && o.Definition != nil {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given []LangString and assigns it to the Definition field.
func (o *DataSpecificationIEC61360ContentAllOf) SetDefinition(v []LangString) {
	o.Definition = v
}

// GetLevelType returns the LevelType field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetLevelType() []LevelType {
	if o == nil || o.LevelType == nil {
		var ret []LevelType
		return ret
	}
	return o.LevelType
}

// GetLevelTypeOk returns a tuple with the LevelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetLevelTypeOk() ([]LevelType, bool) {
	if o == nil || o.LevelType == nil {
		return nil, false
	}
	return o.LevelType, true
}

// HasLevelType returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasLevelType() bool {
	if o != nil && o.LevelType != nil {
		return true
	}

	return false
}

// SetLevelType gets a reference to the given []LevelType and assigns it to the LevelType field.
func (o *DataSpecificationIEC61360ContentAllOf) SetLevelType(v []LevelType) {
	o.LevelType = v
}

// GetPreferredName returns the PreferredName field value
func (o *DataSpecificationIEC61360ContentAllOf) GetPreferredName() []LangString {
	if o == nil {
		var ret []LangString
		return ret
	}

	return o.PreferredName
}

// GetPreferredNameOk returns a tuple with the PreferredName field value
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetPreferredNameOk() ([]LangString, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredName, true
}

// SetPreferredName sets field value
func (o *DataSpecificationIEC61360ContentAllOf) SetPreferredName(v []LangString) {
	o.PreferredName = v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetShortName() []LangString {
	if o == nil || o.ShortName == nil {
		var ret []LangString
		return ret
	}
	return o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetShortNameOk() ([]LangString, bool) {
	if o == nil || o.ShortName == nil {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasShortName() bool {
	if o != nil && o.ShortName != nil {
		return true
	}

	return false
}

// SetShortName gets a reference to the given []LangString and assigns it to the ShortName field.
func (o *DataSpecificationIEC61360ContentAllOf) SetShortName(v []LangString) {
	o.ShortName = v
}

// GetSourceOfDefinition returns the SourceOfDefinition field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetSourceOfDefinition() string {
	if o == nil || o.SourceOfDefinition == nil {
		var ret string
		return ret
	}
	return *o.SourceOfDefinition
}

// GetSourceOfDefinitionOk returns a tuple with the SourceOfDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetSourceOfDefinitionOk() (*string, bool) {
	if o == nil || o.SourceOfDefinition == nil {
		return nil, false
	}
	return o.SourceOfDefinition, true
}

// HasSourceOfDefinition returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasSourceOfDefinition() bool {
	if o != nil && o.SourceOfDefinition != nil {
		return true
	}

	return false
}

// SetSourceOfDefinition gets a reference to the given string and assigns it to the SourceOfDefinition field.
func (o *DataSpecificationIEC61360ContentAllOf) SetSourceOfDefinition(v string) {
	o.SourceOfDefinition = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *DataSpecificationIEC61360ContentAllOf) SetSymbol(v string) {
	o.Symbol = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *DataSpecificationIEC61360ContentAllOf) SetUnit(v string) {
	o.Unit = &v
}

// GetUnitId returns the UnitId field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetUnitId() Reference {
	if o == nil || o.UnitId == nil {
		var ret Reference
		return ret
	}
	return *o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetUnitIdOk() (*Reference, bool) {
	if o == nil || o.UnitId == nil {
		return nil, false
	}
	return o.UnitId, true
}

// HasUnitId returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasUnitId() bool {
	if o != nil && o.UnitId != nil {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given Reference and assigns it to the UnitId field.
func (o *DataSpecificationIEC61360ContentAllOf) SetUnitId(v Reference) {
	o.UnitId = &v
}

// GetValueFormat returns the ValueFormat field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetValueFormat() string {
	if o == nil || o.ValueFormat == nil {
		var ret string
		return ret
	}
	return *o.ValueFormat
}

// GetValueFormatOk returns a tuple with the ValueFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetValueFormatOk() (*string, bool) {
	if o == nil || o.ValueFormat == nil {
		return nil, false
	}
	return o.ValueFormat, true
}

// HasValueFormat returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasValueFormat() bool {
	if o != nil && o.ValueFormat != nil {
		return true
	}

	return false
}

// SetValueFormat gets a reference to the given string and assigns it to the ValueFormat field.
func (o *DataSpecificationIEC61360ContentAllOf) SetValueFormat(v string) {
	o.ValueFormat = &v
}

// GetValueList returns the ValueList field value if set, zero value otherwise.
func (o *DataSpecificationIEC61360ContentAllOf) GetValueList() ValueList {
	if o == nil || o.ValueList == nil {
		var ret ValueList
		return ret
	}
	return *o.ValueList
}

// GetValueListOk returns a tuple with the ValueList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationIEC61360ContentAllOf) GetValueListOk() (*ValueList, bool) {
	if o == nil || o.ValueList == nil {
		return nil, false
	}
	return o.ValueList, true
}

// HasValueList returns a boolean if a field has been set.
func (o *DataSpecificationIEC61360ContentAllOf) HasValueList() bool {
	if o != nil && o.ValueList != nil {
		return true
	}

	return false
}

// SetValueList gets a reference to the given ValueList and assigns it to the ValueList field.
func (o *DataSpecificationIEC61360ContentAllOf) SetValueList(v ValueList) {
	o.ValueList = &v
}

func (o DataSpecificationIEC61360ContentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if o.Definition != nil {
		toSerialize["definition"] = o.Definition
	}
	if o.LevelType != nil {
		toSerialize["levelType"] = o.LevelType
	}
	if true {
		toSerialize["preferredName"] = o.PreferredName
	}
	if o.ShortName != nil {
		toSerialize["shortName"] = o.ShortName
	}
	if o.SourceOfDefinition != nil {
		toSerialize["sourceOfDefinition"] = o.SourceOfDefinition
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.UnitId != nil {
		toSerialize["unitId"] = o.UnitId
	}
	if o.ValueFormat != nil {
		toSerialize["valueFormat"] = o.ValueFormat
	}
	if o.ValueList != nil {
		toSerialize["valueList"] = o.ValueList
	}
	return json.Marshal(toSerialize)
}

type NullableDataSpecificationIEC61360ContentAllOf struct {
	value *DataSpecificationIEC61360ContentAllOf
	isSet bool
}

func (v NullableDataSpecificationIEC61360ContentAllOf) Get() *DataSpecificationIEC61360ContentAllOf {
	return v.value
}

func (v *NullableDataSpecificationIEC61360ContentAllOf) Set(val *DataSpecificationIEC61360ContentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSpecificationIEC61360ContentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSpecificationIEC61360ContentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSpecificationIEC61360ContentAllOf(val *DataSpecificationIEC61360ContentAllOf) *NullableDataSpecificationIEC61360ContentAllOf {
	return &NullableDataSpecificationIEC61360ContentAllOf{value: val, isSet: true}
}

func (v NullableDataSpecificationIEC61360ContentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSpecificationIEC61360ContentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
