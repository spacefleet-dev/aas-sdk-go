/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DataSpecificationPhysicalUnitContent struct for DataSpecificationPhysicalUnitContent
type DataSpecificationPhysicalUnitContent struct {
	ConversionFactor        *string      `json:"conversionFactor,omitempty"`
	Definition              []LangString `json:"definition"`
	DinNotation             *string      `json:"dinNotation,omitempty"`
	EceCode                 *string      `json:"eceCode,omitempty"`
	EceName                 *string      `json:"eceName,omitempty"`
	NistName                *string      `json:"nistName,omitempty"`
	RegistrationAuthorityId *string      `json:"registrationAuthorityId,omitempty"`
	SiName                  *string      `json:"siName,omitempty"`
	SiNotation              *string      `json:"siNotation,omitempty"`
	SourceOfDefinition      *string      `json:"sourceOfDefinition,omitempty"`
	Supplier                *string      `json:"supplier,omitempty"`
	UnitName                string       `json:"unitName"`
	UnitSymbol              string       `json:"unitSymbol"`
}

// NewDataSpecificationPhysicalUnitContent instantiates a new DataSpecificationPhysicalUnitContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSpecificationPhysicalUnitContent(definition []LangString, unitName string, unitSymbol string) *DataSpecificationPhysicalUnitContent {
	this := DataSpecificationPhysicalUnitContent{}
	this.Definition = definition
	this.UnitName = unitName
	this.UnitSymbol = unitSymbol
	return &this
}

// NewDataSpecificationPhysicalUnitContentWithDefaults instantiates a new DataSpecificationPhysicalUnitContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSpecificationPhysicalUnitContentWithDefaults() *DataSpecificationPhysicalUnitContent {
	this := DataSpecificationPhysicalUnitContent{}
	return &this
}

// GetConversionFactor returns the ConversionFactor field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetConversionFactor() string {
	if o == nil || o.ConversionFactor == nil {
		var ret string
		return ret
	}
	return *o.ConversionFactor
}

// GetConversionFactorOk returns a tuple with the ConversionFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetConversionFactorOk() (*string, bool) {
	if o == nil || o.ConversionFactor == nil {
		return nil, false
	}
	return o.ConversionFactor, true
}

// HasConversionFactor returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasConversionFactor() bool {
	if o != nil && o.ConversionFactor != nil {
		return true
	}

	return false
}

// SetConversionFactor gets a reference to the given string and assigns it to the ConversionFactor field.
func (o *DataSpecificationPhysicalUnitContent) SetConversionFactor(v string) {
	o.ConversionFactor = &v
}

// GetDefinition returns the Definition field value
func (o *DataSpecificationPhysicalUnitContent) GetDefinition() []LangString {
	if o == nil {
		var ret []LangString
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetDefinitionOk() ([]LangString, bool) {
	if o == nil {
		return nil, false
	}
	return o.Definition, true
}

// SetDefinition sets field value
func (o *DataSpecificationPhysicalUnitContent) SetDefinition(v []LangString) {
	o.Definition = v
}

// GetDinNotation returns the DinNotation field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetDinNotation() string {
	if o == nil || o.DinNotation == nil {
		var ret string
		return ret
	}
	return *o.DinNotation
}

// GetDinNotationOk returns a tuple with the DinNotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetDinNotationOk() (*string, bool) {
	if o == nil || o.DinNotation == nil {
		return nil, false
	}
	return o.DinNotation, true
}

// HasDinNotation returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasDinNotation() bool {
	if o != nil && o.DinNotation != nil {
		return true
	}

	return false
}

// SetDinNotation gets a reference to the given string and assigns it to the DinNotation field.
func (o *DataSpecificationPhysicalUnitContent) SetDinNotation(v string) {
	o.DinNotation = &v
}

// GetEceCode returns the EceCode field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetEceCode() string {
	if o == nil || o.EceCode == nil {
		var ret string
		return ret
	}
	return *o.EceCode
}

// GetEceCodeOk returns a tuple with the EceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetEceCodeOk() (*string, bool) {
	if o == nil || o.EceCode == nil {
		return nil, false
	}
	return o.EceCode, true
}

// HasEceCode returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasEceCode() bool {
	if o != nil && o.EceCode != nil {
		return true
	}

	return false
}

// SetEceCode gets a reference to the given string and assigns it to the EceCode field.
func (o *DataSpecificationPhysicalUnitContent) SetEceCode(v string) {
	o.EceCode = &v
}

// GetEceName returns the EceName field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetEceName() string {
	if o == nil || o.EceName == nil {
		var ret string
		return ret
	}
	return *o.EceName
}

// GetEceNameOk returns a tuple with the EceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetEceNameOk() (*string, bool) {
	if o == nil || o.EceName == nil {
		return nil, false
	}
	return o.EceName, true
}

// HasEceName returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasEceName() bool {
	if o != nil && o.EceName != nil {
		return true
	}

	return false
}

// SetEceName gets a reference to the given string and assigns it to the EceName field.
func (o *DataSpecificationPhysicalUnitContent) SetEceName(v string) {
	o.EceName = &v
}

// GetNistName returns the NistName field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetNistName() string {
	if o == nil || o.NistName == nil {
		var ret string
		return ret
	}
	return *o.NistName
}

// GetNistNameOk returns a tuple with the NistName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetNistNameOk() (*string, bool) {
	if o == nil || o.NistName == nil {
		return nil, false
	}
	return o.NistName, true
}

// HasNistName returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasNistName() bool {
	if o != nil && o.NistName != nil {
		return true
	}

	return false
}

// SetNistName gets a reference to the given string and assigns it to the NistName field.
func (o *DataSpecificationPhysicalUnitContent) SetNistName(v string) {
	o.NistName = &v
}

// GetRegistrationAuthorityId returns the RegistrationAuthorityId field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetRegistrationAuthorityId() string {
	if o == nil || o.RegistrationAuthorityId == nil {
		var ret string
		return ret
	}
	return *o.RegistrationAuthorityId
}

// GetRegistrationAuthorityIdOk returns a tuple with the RegistrationAuthorityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetRegistrationAuthorityIdOk() (*string, bool) {
	if o == nil || o.RegistrationAuthorityId == nil {
		return nil, false
	}
	return o.RegistrationAuthorityId, true
}

// HasRegistrationAuthorityId returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasRegistrationAuthorityId() bool {
	if o != nil && o.RegistrationAuthorityId != nil {
		return true
	}

	return false
}

// SetRegistrationAuthorityId gets a reference to the given string and assigns it to the RegistrationAuthorityId field.
func (o *DataSpecificationPhysicalUnitContent) SetRegistrationAuthorityId(v string) {
	o.RegistrationAuthorityId = &v
}

// GetSiName returns the SiName field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetSiName() string {
	if o == nil || o.SiName == nil {
		var ret string
		return ret
	}
	return *o.SiName
}

// GetSiNameOk returns a tuple with the SiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetSiNameOk() (*string, bool) {
	if o == nil || o.SiName == nil {
		return nil, false
	}
	return o.SiName, true
}

// HasSiName returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasSiName() bool {
	if o != nil && o.SiName != nil {
		return true
	}

	return false
}

// SetSiName gets a reference to the given string and assigns it to the SiName field.
func (o *DataSpecificationPhysicalUnitContent) SetSiName(v string) {
	o.SiName = &v
}

// GetSiNotation returns the SiNotation field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetSiNotation() string {
	if o == nil || o.SiNotation == nil {
		var ret string
		return ret
	}
	return *o.SiNotation
}

// GetSiNotationOk returns a tuple with the SiNotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetSiNotationOk() (*string, bool) {
	if o == nil || o.SiNotation == nil {
		return nil, false
	}
	return o.SiNotation, true
}

// HasSiNotation returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasSiNotation() bool {
	if o != nil && o.SiNotation != nil {
		return true
	}

	return false
}

// SetSiNotation gets a reference to the given string and assigns it to the SiNotation field.
func (o *DataSpecificationPhysicalUnitContent) SetSiNotation(v string) {
	o.SiNotation = &v
}

// GetSourceOfDefinition returns the SourceOfDefinition field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetSourceOfDefinition() string {
	if o == nil || o.SourceOfDefinition == nil {
		var ret string
		return ret
	}
	return *o.SourceOfDefinition
}

// GetSourceOfDefinitionOk returns a tuple with the SourceOfDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetSourceOfDefinitionOk() (*string, bool) {
	if o == nil || o.SourceOfDefinition == nil {
		return nil, false
	}
	return o.SourceOfDefinition, true
}

// HasSourceOfDefinition returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasSourceOfDefinition() bool {
	if o != nil && o.SourceOfDefinition != nil {
		return true
	}

	return false
}

// SetSourceOfDefinition gets a reference to the given string and assigns it to the SourceOfDefinition field.
func (o *DataSpecificationPhysicalUnitContent) SetSourceOfDefinition(v string) {
	o.SourceOfDefinition = &v
}

// GetSupplier returns the Supplier field value if set, zero value otherwise.
func (o *DataSpecificationPhysicalUnitContent) GetSupplier() string {
	if o == nil || o.Supplier == nil {
		var ret string
		return ret
	}
	return *o.Supplier
}

// GetSupplierOk returns a tuple with the Supplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetSupplierOk() (*string, bool) {
	if o == nil || o.Supplier == nil {
		return nil, false
	}
	return o.Supplier, true
}

// HasSupplier returns a boolean if a field has been set.
func (o *DataSpecificationPhysicalUnitContent) HasSupplier() bool {
	if o != nil && o.Supplier != nil {
		return true
	}

	return false
}

// SetSupplier gets a reference to the given string and assigns it to the Supplier field.
func (o *DataSpecificationPhysicalUnitContent) SetSupplier(v string) {
	o.Supplier = &v
}

// GetUnitName returns the UnitName field value
func (o *DataSpecificationPhysicalUnitContent) GetUnitName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitName
}

// GetUnitNameOk returns a tuple with the UnitName field value
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetUnitNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitName, true
}

// SetUnitName sets field value
func (o *DataSpecificationPhysicalUnitContent) SetUnitName(v string) {
	o.UnitName = v
}

// GetUnitSymbol returns the UnitSymbol field value
func (o *DataSpecificationPhysicalUnitContent) GetUnitSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitSymbol
}

// GetUnitSymbolOk returns a tuple with the UnitSymbol field value
// and a boolean to check if the value has been set.
func (o *DataSpecificationPhysicalUnitContent) GetUnitSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitSymbol, true
}

// SetUnitSymbol sets field value
func (o *DataSpecificationPhysicalUnitContent) SetUnitSymbol(v string) {
	o.UnitSymbol = v
}

func (o DataSpecificationPhysicalUnitContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConversionFactor != nil {
		toSerialize["conversionFactor"] = o.ConversionFactor
	}
	if true {
		toSerialize["definition"] = o.Definition
	}
	if o.DinNotation != nil {
		toSerialize["dinNotation"] = o.DinNotation
	}
	if o.EceCode != nil {
		toSerialize["eceCode"] = o.EceCode
	}
	if o.EceName != nil {
		toSerialize["eceName"] = o.EceName
	}
	if o.NistName != nil {
		toSerialize["nistName"] = o.NistName
	}
	if o.RegistrationAuthorityId != nil {
		toSerialize["registrationAuthorityId"] = o.RegistrationAuthorityId
	}
	if o.SiName != nil {
		toSerialize["siName"] = o.SiName
	}
	if o.SiNotation != nil {
		toSerialize["siNotation"] = o.SiNotation
	}
	if o.SourceOfDefinition != nil {
		toSerialize["sourceOfDefinition"] = o.SourceOfDefinition
	}
	if o.Supplier != nil {
		toSerialize["supplier"] = o.Supplier
	}
	if true {
		toSerialize["unitName"] = o.UnitName
	}
	if true {
		toSerialize["unitSymbol"] = o.UnitSymbol
	}
	return json.Marshal(toSerialize)
}

type NullableDataSpecificationPhysicalUnitContent struct {
	value *DataSpecificationPhysicalUnitContent
	isSet bool
}

func (v NullableDataSpecificationPhysicalUnitContent) Get() *DataSpecificationPhysicalUnitContent {
	return v.value
}

func (v *NullableDataSpecificationPhysicalUnitContent) Set(val *DataSpecificationPhysicalUnitContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSpecificationPhysicalUnitContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSpecificationPhysicalUnitContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSpecificationPhysicalUnitContent(val *DataSpecificationPhysicalUnitContent) *NullableDataSpecificationPhysicalUnitContent {
	return &NullableDataSpecificationPhysicalUnitContent{value: val, isSet: true}
}

func (v NullableDataSpecificationPhysicalUnitContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSpecificationPhysicalUnitContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
