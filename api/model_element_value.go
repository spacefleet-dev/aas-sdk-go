//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ElementValue struct for ElementValue
type ElementValue struct {
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewElementValue instantiates a new ElementValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementValue() *ElementValue {
	this := ElementValue{}
	return &this
}

// NewElementValueWithDefaults instantiates a new ElementValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementValueWithDefaults() *ElementValue {
	this := ElementValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElementValue) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElementValue) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ElementValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ElementValue) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ElementValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableElementValue struct {
	value *ElementValue
	isSet bool
}

func (v NullableElementValue) Get() *ElementValue {
	return v.value
}

func (v *NullableElementValue) Set(val *ElementValue) {
	v.value = val
	v.isSet = true
}

func (v NullableElementValue) IsSet() bool {
	return v.isSet
}

func (v *NullableElementValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementValue(val *ElementValue) *NullableElementValue {
	return &NullableElementValue{value: val, isSet: true}
}

func (v NullableElementValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
