/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// EventPayload struct for EventPayload
type EventPayload struct {
	ObservableReference  Reference  `json:"observableReference"`
	ObservableSemanticId *Reference `json:"observableSemanticId,omitempty"`
	Payload              *string    `json:"payload,omitempty"`
	Source               Reference  `json:"source"`
	SourceSemanticId     *Reference `json:"sourceSemanticId,omitempty"`
	SubjectId            *Reference `json:"subjectId,omitempty"`
	TimeStamp            string     `json:"timeStamp"`
	Topic                *string    `json:"topic,omitempty"`
}

// NewEventPayload instantiates a new EventPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventPayload(observableReference Reference, source Reference, timeStamp string) *EventPayload {
	this := EventPayload{}
	this.ObservableReference = observableReference
	this.Source = source
	this.TimeStamp = timeStamp
	return &this
}

// NewEventPayloadWithDefaults instantiates a new EventPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPayloadWithDefaults() *EventPayload {
	this := EventPayload{}
	return &this
}

// GetObservableReference returns the ObservableReference field value
func (o *EventPayload) GetObservableReference() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.ObservableReference
}

// GetObservableReferenceOk returns a tuple with the ObservableReference field value
// and a boolean to check if the value has been set.
func (o *EventPayload) GetObservableReferenceOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObservableReference, true
}

// SetObservableReference sets field value
func (o *EventPayload) SetObservableReference(v Reference) {
	o.ObservableReference = v
}

// GetObservableSemanticId returns the ObservableSemanticId field value if set, zero value otherwise.
func (o *EventPayload) GetObservableSemanticId() Reference {
	if o == nil || o.ObservableSemanticId == nil {
		var ret Reference
		return ret
	}
	return *o.ObservableSemanticId
}

// GetObservableSemanticIdOk returns a tuple with the ObservableSemanticId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetObservableSemanticIdOk() (*Reference, bool) {
	if o == nil || o.ObservableSemanticId == nil {
		return nil, false
	}
	return o.ObservableSemanticId, true
}

// HasObservableSemanticId returns a boolean if a field has been set.
func (o *EventPayload) HasObservableSemanticId() bool {
	if o != nil && o.ObservableSemanticId != nil {
		return true
	}

	return false
}

// SetObservableSemanticId gets a reference to the given Reference and assigns it to the ObservableSemanticId field.
func (o *EventPayload) SetObservableSemanticId(v Reference) {
	o.ObservableSemanticId = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *EventPayload) GetPayload() string {
	if o == nil || o.Payload == nil {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetPayloadOk() (*string, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *EventPayload) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *EventPayload) SetPayload(v string) {
	o.Payload = &v
}

// GetSource returns the Source field value
func (o *EventPayload) GetSource() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *EventPayload) GetSourceOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *EventPayload) SetSource(v Reference) {
	o.Source = v
}

// GetSourceSemanticId returns the SourceSemanticId field value if set, zero value otherwise.
func (o *EventPayload) GetSourceSemanticId() Reference {
	if o == nil || o.SourceSemanticId == nil {
		var ret Reference
		return ret
	}
	return *o.SourceSemanticId
}

// GetSourceSemanticIdOk returns a tuple with the SourceSemanticId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetSourceSemanticIdOk() (*Reference, bool) {
	if o == nil || o.SourceSemanticId == nil {
		return nil, false
	}
	return o.SourceSemanticId, true
}

// HasSourceSemanticId returns a boolean if a field has been set.
func (o *EventPayload) HasSourceSemanticId() bool {
	if o != nil && o.SourceSemanticId != nil {
		return true
	}

	return false
}

// SetSourceSemanticId gets a reference to the given Reference and assigns it to the SourceSemanticId field.
func (o *EventPayload) SetSourceSemanticId(v Reference) {
	o.SourceSemanticId = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *EventPayload) GetSubjectId() Reference {
	if o == nil || o.SubjectId == nil {
		var ret Reference
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetSubjectIdOk() (*Reference, bool) {
	if o == nil || o.SubjectId == nil {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *EventPayload) HasSubjectId() bool {
	if o != nil && o.SubjectId != nil {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given Reference and assigns it to the SubjectId field.
func (o *EventPayload) SetSubjectId(v Reference) {
	o.SubjectId = &v
}

// GetTimeStamp returns the TimeStamp field value
func (o *EventPayload) GetTimeStamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *EventPayload) GetTimeStampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *EventPayload) SetTimeStamp(v string) {
	o.TimeStamp = v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *EventPayload) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *EventPayload) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *EventPayload) SetTopic(v string) {
	o.Topic = &v
}

func (o EventPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["observableReference"] = o.ObservableReference
	}
	if o.ObservableSemanticId != nil {
		toSerialize["observableSemanticId"] = o.ObservableSemanticId
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if o.SourceSemanticId != nil {
		toSerialize["sourceSemanticId"] = o.SourceSemanticId
	}
	if o.SubjectId != nil {
		toSerialize["subjectId"] = o.SubjectId
	}
	if true {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	return json.Marshal(toSerialize)
}

type NullableEventPayload struct {
	value *EventPayload
	isSet bool
}

func (v NullableEventPayload) Get() *EventPayload {
	return v.value
}

func (v *NullableEventPayload) Set(val *EventPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEventPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEventPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventPayload(val *EventPayload) *NullableEventPayload {
	return &NullableEventPayload{value: val, isSet: true}
}

func (v NullableEventPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
