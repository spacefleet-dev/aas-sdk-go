/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// HasSemantics struct for HasSemantics
type HasSemantics struct {
	SemanticId              *Reference  `json:"semanticId,omitempty"`
	SupplementalSemanticIds []Reference `json:"supplementalSemanticIds,omitempty"`
}

// NewHasSemantics instantiates a new HasSemantics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHasSemantics() *HasSemantics {
	this := HasSemantics{}
	return &this
}

// NewHasSemanticsWithDefaults instantiates a new HasSemantics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHasSemanticsWithDefaults() *HasSemantics {
	this := HasSemantics{}
	return &this
}

// GetSemanticId returns the SemanticId field value if set, zero value otherwise.
func (o *HasSemantics) GetSemanticId() Reference {
	if o == nil || o.SemanticId == nil {
		var ret Reference
		return ret
	}
	return *o.SemanticId
}

// GetSemanticIdOk returns a tuple with the SemanticId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasSemantics) GetSemanticIdOk() (*Reference, bool) {
	if o == nil || o.SemanticId == nil {
		return nil, false
	}
	return o.SemanticId, true
}

// HasSemanticId returns a boolean if a field has been set.
func (o *HasSemantics) HasSemanticId() bool {
	if o != nil && o.SemanticId != nil {
		return true
	}

	return false
}

// SetSemanticId gets a reference to the given Reference and assigns it to the SemanticId field.
func (o *HasSemantics) SetSemanticId(v Reference) {
	o.SemanticId = &v
}

// GetSupplementalSemanticIds returns the SupplementalSemanticIds field value if set, zero value otherwise.
func (o *HasSemantics) GetSupplementalSemanticIds() []Reference {
	if o == nil || o.SupplementalSemanticIds == nil {
		var ret []Reference
		return ret
	}
	return o.SupplementalSemanticIds
}

// GetSupplementalSemanticIdsOk returns a tuple with the SupplementalSemanticIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HasSemantics) GetSupplementalSemanticIdsOk() ([]Reference, bool) {
	if o == nil || o.SupplementalSemanticIds == nil {
		return nil, false
	}
	return o.SupplementalSemanticIds, true
}

// HasSupplementalSemanticIds returns a boolean if a field has been set.
func (o *HasSemantics) HasSupplementalSemanticIds() bool {
	if o != nil && o.SupplementalSemanticIds != nil {
		return true
	}

	return false
}

// SetSupplementalSemanticIds gets a reference to the given []Reference and assigns it to the SupplementalSemanticIds field.
func (o *HasSemantics) SetSupplementalSemanticIds(v []Reference) {
	o.SupplementalSemanticIds = v
}

func (o HasSemantics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SemanticId != nil {
		toSerialize["semanticId"] = o.SemanticId
	}
	if o.SupplementalSemanticIds != nil {
		toSerialize["supplementalSemanticIds"] = o.SupplementalSemanticIds
	}
	return json.Marshal(toSerialize)
}

type NullableHasSemantics struct {
	value *HasSemantics
	isSet bool
}

func (v NullableHasSemantics) Get() *HasSemantics {
	return v.value
}

func (v *NullableHasSemantics) Set(val *HasSemantics) {
	v.value = val
	v.isSet = true
}

func (v NullableHasSemantics) IsSet() bool {
	return v.isSet
}

func (v *NullableHasSemantics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHasSemantics(val *HasSemantics) *NullableHasSemantics {
	return &NullableHasSemantics{value: val, isSet: true}
}

func (v NullableHasSemantics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHasSemantics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
