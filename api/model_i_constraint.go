//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// IConstraint struct for IConstraint
type IConstraint struct {
	ModelType *ModelType `json:"modelType,omitempty"`
}

// NewIConstraint instantiates a new IConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIConstraint() *IConstraint {
	this := IConstraint{}
	return &this
}

// NewIConstraintWithDefaults instantiates a new IConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIConstraintWithDefaults() *IConstraint {
	this := IConstraint{}
	return &this
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *IConstraint) GetModelType() ModelType {
	if o == nil || o.ModelType == nil {
		var ret ModelType
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IConstraint) GetModelTypeOk() (*ModelType, bool) {
	if o == nil || o.ModelType == nil {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *IConstraint) HasModelType() bool {
	if o != nil && o.ModelType != nil {
		return true
	}

	return false
}

// SetModelType gets a reference to the given ModelType and assigns it to the ModelType field.
func (o *IConstraint) SetModelType(v ModelType) {
	o.ModelType = &v
}

func (o IConstraint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ModelType != nil {
		toSerialize["modelType"] = o.ModelType
	}
	return json.Marshal(toSerialize)
}

type NullableIConstraint struct {
	value *IConstraint
	isSet bool
}

func (v NullableIConstraint) Get() *IConstraint {
	return v.value
}

func (v *NullableIConstraint) Set(val *IConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableIConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableIConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIConstraint(val *IConstraint) *NullableIConstraint {
	return &NullableIConstraint{value: val, isSet: true}
}

func (v NullableIConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
