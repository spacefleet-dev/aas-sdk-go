//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// IEmbeddedDataSpecification struct for IEmbeddedDataSpecification
type IEmbeddedDataSpecification struct {
	DataSpecificationContent map[string]interface{} `json:"dataSpecificationContent,omitempty"`
	HasDataSpecification     *Reference             `json:"hasDataSpecification,omitempty"`
}

// NewIEmbeddedDataSpecification instantiates a new IEmbeddedDataSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIEmbeddedDataSpecification() *IEmbeddedDataSpecification {
	this := IEmbeddedDataSpecification{}
	return &this
}

// NewIEmbeddedDataSpecificationWithDefaults instantiates a new IEmbeddedDataSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIEmbeddedDataSpecificationWithDefaults() *IEmbeddedDataSpecification {
	this := IEmbeddedDataSpecification{}
	return &this
}

// GetDataSpecificationContent returns the DataSpecificationContent field value if set, zero value otherwise.
func (o *IEmbeddedDataSpecification) GetDataSpecificationContent() map[string]interface{} {
	if o == nil || o.DataSpecificationContent == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.DataSpecificationContent
}

// GetDataSpecificationContentOk returns a tuple with the DataSpecificationContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEmbeddedDataSpecification) GetDataSpecificationContentOk() (map[string]interface{}, bool) {
	if o == nil || o.DataSpecificationContent == nil {
		return nil, false
	}
	return o.DataSpecificationContent, true
}

// HasDataSpecificationContent returns a boolean if a field has been set.
func (o *IEmbeddedDataSpecification) HasDataSpecificationContent() bool {
	if o != nil && o.DataSpecificationContent != nil {
		return true
	}

	return false
}

// SetDataSpecificationContent gets a reference to the given map[string]interface{} and assigns it to the DataSpecificationContent field.
func (o *IEmbeddedDataSpecification) SetDataSpecificationContent(v map[string]interface{}) {
	o.DataSpecificationContent = v
}

// GetHasDataSpecification returns the HasDataSpecification field value if set, zero value otherwise.
func (o *IEmbeddedDataSpecification) GetHasDataSpecification() Reference {
	if o == nil || o.HasDataSpecification == nil {
		var ret Reference
		return ret
	}
	return *o.HasDataSpecification
}

// GetHasDataSpecificationOk returns a tuple with the HasDataSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEmbeddedDataSpecification) GetHasDataSpecificationOk() (*Reference, bool) {
	if o == nil || o.HasDataSpecification == nil {
		return nil, false
	}
	return o.HasDataSpecification, true
}

// HasHasDataSpecification returns a boolean if a field has been set.
func (o *IEmbeddedDataSpecification) HasHasDataSpecification() bool {
	if o != nil && o.HasDataSpecification != nil {
		return true
	}

	return false
}

// SetHasDataSpecification gets a reference to the given Reference and assigns it to the HasDataSpecification field.
func (o *IEmbeddedDataSpecification) SetHasDataSpecification(v Reference) {
	o.HasDataSpecification = &v
}

func (o IEmbeddedDataSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSpecificationContent != nil {
		toSerialize["dataSpecificationContent"] = o.DataSpecificationContent
	}
	if o.HasDataSpecification != nil {
		toSerialize["hasDataSpecification"] = o.HasDataSpecification
	}
	return json.Marshal(toSerialize)
}

type NullableIEmbeddedDataSpecification struct {
	value *IEmbeddedDataSpecification
	isSet bool
}

func (v NullableIEmbeddedDataSpecification) Get() *IEmbeddedDataSpecification {
	return v.value
}

func (v *NullableIEmbeddedDataSpecification) Set(val *IEmbeddedDataSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableIEmbeddedDataSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableIEmbeddedDataSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIEmbeddedDataSpecification(val *IEmbeddedDataSpecification) *NullableIEmbeddedDataSpecification {
	return &NullableIEmbeddedDataSpecification{value: val, isSet: true}
}

func (v NullableIEmbeddedDataSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIEmbeddedDataSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
