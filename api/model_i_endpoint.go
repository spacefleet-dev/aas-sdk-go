//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// IEndpoint struct for IEndpoint
type IEndpoint struct {
	Address  NullableString         `json:"address,omitempty"`
	Security map[string]interface{} `json:"security,omitempty"`
	Type     NullableString         `json:"type,omitempty"`
}

// NewIEndpoint instantiates a new IEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIEndpoint() *IEndpoint {
	this := IEndpoint{}
	return &this
}

// NewIEndpointWithDefaults instantiates a new IEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIEndpointWithDefaults() *IEndpoint {
	this := IEndpoint{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEndpoint) GetAddress() string {
	if o == nil || o.Address.Get() == nil {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEndpoint) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *IEndpoint) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *IEndpoint) SetAddress(v string) {
	o.Address.Set(&v)
}

// SetAddressNil sets the value for Address to be an explicit nil
func (o *IEndpoint) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *IEndpoint) UnsetAddress() {
	o.Address.Unset()
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *IEndpoint) GetSecurity() map[string]interface{} {
	if o == nil || o.Security == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IEndpoint) GetSecurityOk() (map[string]interface{}, bool) {
	if o == nil || o.Security == nil {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *IEndpoint) HasSecurity() bool {
	if o != nil && o.Security != nil {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given map[string]interface{} and assigns it to the Security field.
func (o *IEndpoint) SetSecurity(v map[string]interface{}) {
	o.Security = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IEndpoint) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IEndpoint) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *IEndpoint) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *IEndpoint) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *IEndpoint) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *IEndpoint) UnsetType() {
	o.Type.Unset()
}

func (o IEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.Security != nil {
		toSerialize["security"] = o.Security
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIEndpoint struct {
	value *IEndpoint
	isSet bool
}

func (v NullableIEndpoint) Get() *IEndpoint {
	return v.value
}

func (v *NullableIEndpoint) Set(val *IEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableIEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableIEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIEndpoint(val *IEndpoint) *NullableIEndpoint {
	return &NullableIEndpoint{value: val, isSet: true}
}

func (v NullableIEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
