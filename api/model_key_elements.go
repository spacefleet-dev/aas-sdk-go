/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// KeyElements the model 'KeyElements'
type KeyElements string

// List of KeyElements
const (
	KEYELEMENTS_ASSET                          KeyElements = "Asset"
	KEYELEMENTS_ASSET_ADMINISTRATION_SHELL     KeyElements = "AssetAdministrationShell"
	KEYELEMENTS_CONCEPT_DESCRIPTION            KeyElements = "ConceptDescription"
	KEYELEMENTS_SUBMODEL                       KeyElements = "Submodel"
	KEYELEMENTS_ACCESS_PERMISSION_RULE         KeyElements = "AccessPermissionRule"
	KEYELEMENTS_ANNOTATED_RELATIONSHIP_ELEMENT KeyElements = "AnnotatedRelationshipElement"
	KEYELEMENTS_BASIC_EVENT                    KeyElements = "BasicEvent"
	KEYELEMENTS_BLOB                           KeyElements = "Blob"
	KEYELEMENTS_CAPABILITY                     KeyElements = "Capability"
	KEYELEMENTS_CONCEPT_DICTIONARY             KeyElements = "ConceptDictionary"
	KEYELEMENTS_DATA_ELEMENT                   KeyElements = "DataElement"
	KEYELEMENTS_FILE                           KeyElements = "File"
	KEYELEMENTS_ENTITY                         KeyElements = "Entity"
	KEYELEMENTS_EVENT                          KeyElements = "Event"
	KEYELEMENTS_MULTI_LANGUAGE_PROPERTY        KeyElements = "MultiLanguageProperty"
	KEYELEMENTS_OPERATION                      KeyElements = "Operation"
	KEYELEMENTS_PROPERTY                       KeyElements = "Property"
	KEYELEMENTS_RANGE                          KeyElements = "Range"
	KEYELEMENTS_REFERENCE_ELEMENT              KeyElements = "ReferenceElement"
	KEYELEMENTS_RELATIONSHIP_ELEMENT           KeyElements = "RelationshipElement"
	KEYELEMENTS_SUBMODEL_ELEMENT               KeyElements = "SubmodelElement"
	KEYELEMENTS_SUBMODEL_ELEMENT_COLLECTION    KeyElements = "SubmodelElementCollection"
	KEYELEMENTS_VIEW                           KeyElements = "View"
	KEYELEMENTS_GLOBAL_REFERENCE               KeyElements = "GlobalReference"
	KEYELEMENTS_FRAGMENT_REFERENCE             KeyElements = "FragmentReference"
)

// All allowed values of KeyElements enum
var AllowedKeyElementsEnumValues = []KeyElements{
	"Asset",
	"AssetAdministrationShell",
	"ConceptDescription",
	"Submodel",
	"AccessPermissionRule",
	"AnnotatedRelationshipElement",
	"BasicEvent",
	"Blob",
	"Capability",
	"ConceptDictionary",
	"DataElement",
	"File",
	"Entity",
	"Event",
	"MultiLanguageProperty",
	"Operation",
	"Property",
	"Range",
	"ReferenceElement",
	"RelationshipElement",
	"SubmodelElement",
	"SubmodelElementCollection",
	"View",
	"GlobalReference",
	"FragmentReference",
}

func (v *KeyElements) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyElements(value)
	for _, existing := range AllowedKeyElementsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyElements", value)
}

// NewKeyElementsFromValue returns a pointer to a valid KeyElements
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyElementsFromValue(v string) (*KeyElements, error) {
	ev := KeyElements(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyElements: valid values are %v", v, AllowedKeyElementsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyElements) IsValid() bool {
	for _, existing := range AllowedKeyElementsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyElements value
func (v KeyElements) Ptr() *KeyElements {
	return &v
}

type NullableKeyElements struct {
	value *KeyElements
	isSet bool
}

func (v NullableKeyElements) Get() *KeyElements {
	return v.value
}

func (v *NullableKeyElements) Set(val *KeyElements) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyElements) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyElements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyElements(val *KeyElements) *NullableKeyElements {
	return &NullableKeyElements{value: val, isSet: true}
}

func (v NullableKeyElements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyElements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
