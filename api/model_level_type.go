//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// LevelType the model 'LevelType'
type LevelType string

// List of LevelType
const (
	LEVELTYPE_MAX LevelType = "Max"
	LEVELTYPE_MIN LevelType = "Min"
	LEVELTYPE_NOM LevelType = "Nom"
	LEVELTYPE_TYP LevelType = "Typ"
)

// All allowed values of LevelType enum
var AllowedLevelTypeEnumValues = []LevelType{
	"Max",
	"Min",
	"Nom",
	"Typ",
}

func (v *LevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LevelType(value)
	for _, existing := range AllowedLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LevelType", value)
}

// NewLevelTypeFromValue returns a pointer to a valid LevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLevelTypeFromValue(v string) (*LevelType, error) {
	ev := LevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LevelType: valid values are %v", v, AllowedLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LevelType) IsValid() bool {
	for _, existing := range AllowedLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LevelType value
func (v LevelType) Ptr() *LevelType {
	return &v
}

type NullableLevelType struct {
	value *LevelType
	isSet bool
}

func (v NullableLevelType) Get() *LevelType {
	return v.value
}

func (v *NullableLevelType) Set(val *LevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLevelType(val *LevelType) *NullableLevelType {
	return &NullableLevelType{value: val, isSet: true}
}

func (v NullableLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
