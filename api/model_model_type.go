/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ModelType the model 'ModelType'
type ModelType string

// List of ModelType
const (
	MODELTYPE_ANNOTATED_RELATIONSHIP_ELEMENT   ModelType = "AnnotatedRelationshipElement"
	MODELTYPE_ASSET_ADMINISTRATION_SHELL       ModelType = "AssetAdministrationShell"
	MODELTYPE_BASIC_EVENT_ELEMENT              ModelType = "BasicEventElement"
	MODELTYPE_BLOB                             ModelType = "Blob"
	MODELTYPE_CAPABILITY                       ModelType = "Capability"
	MODELTYPE_CONCEPT_DESCRIPTION              ModelType = "ConceptDescription"
	MODELTYPE_DATA_SPECIFICATION_IEC61360      ModelType = "DataSpecificationIEC61360"
	MODELTYPE_DATA_SPECIFICATION_PHYSICAL_UNIT ModelType = "DataSpecificationPhysicalUnit"
	MODELTYPE_ENTITY                           ModelType = "Entity"
	MODELTYPE_FILE                             ModelType = "File"
	MODELTYPE_MULTI_LANGUAGE_PROPERTY          ModelType = "MultiLanguageProperty"
	MODELTYPE_OPERATION                        ModelType = "Operation"
	MODELTYPE_PROPERTY                         ModelType = "Property"
	MODELTYPE_RANGE                            ModelType = "Range"
	MODELTYPE_REFERENCE_ELEMENT                ModelType = "ReferenceElement"
	MODELTYPE_RELATIONSHIP_ELEMENT             ModelType = "RelationshipElement"
	MODELTYPE_SUBMODEL                         ModelType = "Submodel"
	MODELTYPE_SUBMODEL_ELEMENT_COLLECTION      ModelType = "SubmodelElementCollection"
	MODELTYPE_SUBMODEL_ELEMENT_LIST            ModelType = "SubmodelElementList"
)

// All allowed values of ModelType enum
var AllowedModelTypeEnumValues = []ModelType{
	"AnnotatedRelationshipElement",
	"AssetAdministrationShell",
	"BasicEventElement",
	"Blob",
	"Capability",
	"ConceptDescription",
	"DataSpecificationIEC61360",
	"DataSpecificationPhysicalUnit",
	"Entity",
	"File",
	"MultiLanguageProperty",
	"Operation",
	"Property",
	"Range",
	"ReferenceElement",
	"RelationshipElement",
	"Submodel",
	"SubmodelElementCollection",
	"SubmodelElementList",
}

func (v *ModelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelType(value)
	for _, existing := range AllowedModelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelType", value)
}

// NewModelTypeFromValue returns a pointer to a valid ModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTypeFromValue(v string) (*ModelType, error) {
	ev := ModelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelType: valid values are %v", v, AllowedModelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelType) IsValid() bool {
	for _, existing := range AllowedModelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModelType value
func (v ModelType) Ptr() *ModelType {
	return &v
}

type NullableModelType struct {
	value *ModelType
	isSet bool
}

func (v NullableModelType) Get() *ModelType {
	return v.value
}

func (v *NullableModelType) Set(val *ModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelType(val *ModelType) *NullableModelType {
	return &NullableModelType{value: val, isSet: true}
}

func (v NullableModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
