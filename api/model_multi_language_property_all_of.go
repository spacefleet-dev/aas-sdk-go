/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MultiLanguagePropertyAllOf struct for MultiLanguagePropertyAllOf
type MultiLanguagePropertyAllOf struct {
	Value   []LangString `json:"value,omitempty"`
	ValueId *Reference   `json:"valueId,omitempty"`
}

// NewMultiLanguagePropertyAllOf instantiates a new MultiLanguagePropertyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiLanguagePropertyAllOf() *MultiLanguagePropertyAllOf {
	this := MultiLanguagePropertyAllOf{}
	return &this
}

// NewMultiLanguagePropertyAllOfWithDefaults instantiates a new MultiLanguagePropertyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiLanguagePropertyAllOfWithDefaults() *MultiLanguagePropertyAllOf {
	this := MultiLanguagePropertyAllOf{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MultiLanguagePropertyAllOf) GetValue() []LangString {
	if o == nil || o.Value == nil {
		var ret []LangString
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiLanguagePropertyAllOf) GetValueOk() ([]LangString, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MultiLanguagePropertyAllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []LangString and assigns it to the Value field.
func (o *MultiLanguagePropertyAllOf) SetValue(v []LangString) {
	o.Value = v
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *MultiLanguagePropertyAllOf) GetValueId() Reference {
	if o == nil || o.ValueId == nil {
		var ret Reference
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiLanguagePropertyAllOf) GetValueIdOk() (*Reference, bool) {
	if o == nil || o.ValueId == nil {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *MultiLanguagePropertyAllOf) HasValueId() bool {
	if o != nil && o.ValueId != nil {
		return true
	}

	return false
}

// SetValueId gets a reference to the given Reference and assigns it to the ValueId field.
func (o *MultiLanguagePropertyAllOf) SetValueId(v Reference) {
	o.ValueId = &v
}

func (o MultiLanguagePropertyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueId != nil {
		toSerialize["valueId"] = o.ValueId
	}
	return json.Marshal(toSerialize)
}

type NullableMultiLanguagePropertyAllOf struct {
	value *MultiLanguagePropertyAllOf
	isSet bool
}

func (v NullableMultiLanguagePropertyAllOf) Get() *MultiLanguagePropertyAllOf {
	return v.value
}

func (v *NullableMultiLanguagePropertyAllOf) Set(val *MultiLanguagePropertyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiLanguagePropertyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiLanguagePropertyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiLanguagePropertyAllOf(val *MultiLanguagePropertyAllOf) *NullableMultiLanguagePropertyAllOf {
	return &NullableMultiLanguagePropertyAllOf{value: val, isSet: true}
}

func (v NullableMultiLanguagePropertyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiLanguagePropertyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
