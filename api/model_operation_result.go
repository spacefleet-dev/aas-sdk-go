/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// OperationResult struct for OperationResult
type OperationResult struct {
	Entity      map[string]interface{} `json:"entity,omitempty"`
	EntityType  NullableString         `json:"entityType,omitempty"`
	IsException NullableBool           `json:"isException,omitempty"`
	Messages    []Message              `json:"messages,omitempty"`
	Success     *bool                  `json:"success,omitempty"`
}

// NewOperationResult instantiates a new OperationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationResult() *OperationResult {
	this := OperationResult{}
	return &this
}

// NewOperationResultWithDefaults instantiates a new OperationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationResultWithDefaults() *OperationResult {
	this := OperationResult{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OperationResult) GetEntity() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OperationResult) GetEntityOk() (map[string]interface{}, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *OperationResult) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given map[string]interface{} and assigns it to the Entity field.
func (o *OperationResult) SetEntity(v map[string]interface{}) {
	o.Entity = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OperationResult) GetEntityType() string {
	if o == nil || o.EntityType.Get() == nil {
		var ret string
		return ret
	}
	return *o.EntityType.Get()
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OperationResult) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityType.Get(), o.EntityType.IsSet()
}

// HasEntityType returns a boolean if a field has been set.
func (o *OperationResult) HasEntityType() bool {
	if o != nil && o.EntityType.IsSet() {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given NullableString and assigns it to the EntityType field.
func (o *OperationResult) SetEntityType(v string) {
	o.EntityType.Set(&v)
}

// SetEntityTypeNil sets the value for EntityType to be an explicit nil
func (o *OperationResult) SetEntityTypeNil() {
	o.EntityType.Set(nil)
}

// UnsetEntityType ensures that no value is present for EntityType, not even an explicit nil
func (o *OperationResult) UnsetEntityType() {
	o.EntityType.Unset()
}

// GetIsException returns the IsException field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OperationResult) GetIsException() bool {
	if o == nil || o.IsException.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsException.Get()
}

// GetIsExceptionOk returns a tuple with the IsException field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OperationResult) GetIsExceptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsException.Get(), o.IsException.IsSet()
}

// HasIsException returns a boolean if a field has been set.
func (o *OperationResult) HasIsException() bool {
	if o != nil && o.IsException.IsSet() {
		return true
	}

	return false
}

// SetIsException gets a reference to the given NullableBool and assigns it to the IsException field.
func (o *OperationResult) SetIsException(v bool) {
	o.IsException.Set(&v)
}

// SetIsExceptionNil sets the value for IsException to be an explicit nil
func (o *OperationResult) SetIsExceptionNil() {
	o.IsException.Set(nil)
}

// UnsetIsException ensures that no value is present for IsException, not even an explicit nil
func (o *OperationResult) UnsetIsException() {
	o.IsException.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OperationResult) GetMessages() []Message {
	if o == nil {
		var ret []Message
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OperationResult) GetMessagesOk() ([]Message, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *OperationResult) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []Message and assigns it to the Messages field.
func (o *OperationResult) SetMessages(v []Message) {
	o.Messages = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *OperationResult) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationResult) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *OperationResult) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *OperationResult) SetSuccess(v bool) {
	o.Success = &v
}

func (o OperationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	if o.EntityType.IsSet() {
		toSerialize["entityType"] = o.EntityType.Get()
	}
	if o.IsException.IsSet() {
		toSerialize["isException"] = o.IsException.Get()
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableOperationResult struct {
	value *OperationResult
	isSet bool
}

func (v NullableOperationResult) Get() *OperationResult {
	return v.value
}

func (v *NullableOperationResult) Set(val *OperationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationResult(val *OperationResult) *NullableOperationResult {
	return &NullableOperationResult{value: val, isSet: true}
}

func (v NullableOperationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
