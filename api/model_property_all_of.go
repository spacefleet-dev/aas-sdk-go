/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PropertyAllOf struct for PropertyAllOf
type PropertyAllOf struct {
	Value     *string        `json:"value,omitempty"`
	ValueId   *Reference     `json:"valueId,omitempty"`
	ValueType DataTypeDefXsd `json:"valueType"`
}

// NewPropertyAllOf instantiates a new PropertyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyAllOf(valueType DataTypeDefXsd) *PropertyAllOf {
	this := PropertyAllOf{}
	this.ValueType = valueType
	return &this
}

// NewPropertyAllOfWithDefaults instantiates a new PropertyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyAllOfWithDefaults() *PropertyAllOf {
	this := PropertyAllOf{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PropertyAllOf) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAllOf) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyAllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *PropertyAllOf) SetValue(v string) {
	o.Value = &v
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *PropertyAllOf) GetValueId() Reference {
	if o == nil || o.ValueId == nil {
		var ret Reference
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyAllOf) GetValueIdOk() (*Reference, bool) {
	if o == nil || o.ValueId == nil {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *PropertyAllOf) HasValueId() bool {
	if o != nil && o.ValueId != nil {
		return true
	}

	return false
}

// SetValueId gets a reference to the given Reference and assigns it to the ValueId field.
func (o *PropertyAllOf) SetValueId(v Reference) {
	o.ValueId = &v
}

// GetValueType returns the ValueType field value
func (o *PropertyAllOf) GetValueType() DataTypeDefXsd {
	if o == nil {
		var ret DataTypeDefXsd
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *PropertyAllOf) GetValueTypeOk() (*DataTypeDefXsd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *PropertyAllOf) SetValueType(v DataTypeDefXsd) {
	o.ValueType = v
}

func (o PropertyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueId != nil {
		toSerialize["valueId"] = o.ValueId
	}
	if true {
		toSerialize["valueType"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}

type NullablePropertyAllOf struct {
	value *PropertyAllOf
	isSet bool
}

func (v NullablePropertyAllOf) Get() *PropertyAllOf {
	return v.value
}

func (v *NullablePropertyAllOf) Set(val *PropertyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyAllOf(val *PropertyAllOf) *NullablePropertyAllOf {
	return &NullablePropertyAllOf{value: val, isSet: true}
}

func (v NullablePropertyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
