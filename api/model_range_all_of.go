/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RangeAllOf struct for RangeAllOf
type RangeAllOf struct {
	Max       *string        `json:"max,omitempty"`
	Min       *string        `json:"min,omitempty"`
	ValueType DataTypeDefXsd `json:"valueType"`
}

// NewRangeAllOf instantiates a new RangeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeAllOf(valueType DataTypeDefXsd) *RangeAllOf {
	this := RangeAllOf{}
	this.ValueType = valueType
	return &this
}

// NewRangeAllOfWithDefaults instantiates a new RangeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeAllOfWithDefaults() *RangeAllOf {
	this := RangeAllOf{}
	return &this
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *RangeAllOf) GetMax() string {
	if o == nil || o.Max == nil {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeAllOf) GetMaxOk() (*string, bool) {
	if o == nil || o.Max == nil {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *RangeAllOf) HasMax() bool {
	if o != nil && o.Max != nil {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *RangeAllOf) SetMax(v string) {
	o.Max = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *RangeAllOf) GetMin() string {
	if o == nil || o.Min == nil {
		var ret string
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeAllOf) GetMinOk() (*string, bool) {
	if o == nil || o.Min == nil {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *RangeAllOf) HasMin() bool {
	if o != nil && o.Min != nil {
		return true
	}

	return false
}

// SetMin gets a reference to the given string and assigns it to the Min field.
func (o *RangeAllOf) SetMin(v string) {
	o.Min = &v
}

// GetValueType returns the ValueType field value
func (o *RangeAllOf) GetValueType() DataTypeDefXsd {
	if o == nil {
		var ret DataTypeDefXsd
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *RangeAllOf) GetValueTypeOk() (*DataTypeDefXsd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *RangeAllOf) SetValueType(v DataTypeDefXsd) {
	o.ValueType = v
}

func (o RangeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Max != nil {
		toSerialize["max"] = o.Max
	}
	if o.Min != nil {
		toSerialize["min"] = o.Min
	}
	if true {
		toSerialize["valueType"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}

type NullableRangeAllOf struct {
	value *RangeAllOf
	isSet bool
}

func (v NullableRangeAllOf) Get() *RangeAllOf {
	return v.value
}

func (v *NullableRangeAllOf) Set(val *RangeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeAllOf(val *RangeAllOf) *NullableRangeAllOf {
	return &NullableRangeAllOf{value: val, isSet: true}
}

func (v NullableRangeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
