//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ReferenceTypes the model 'ReferenceTypes'
type ReferenceTypes string

// List of ReferenceTypes
const (
	REFERENCETYPES_GLOBAL_REFERENCE ReferenceTypes = "GlobalReference"
	REFERENCETYPES_MODEL_REFERENCE  ReferenceTypes = "ModelReference"
)

// All allowed values of ReferenceTypes enum
var AllowedReferenceTypesEnumValues = []ReferenceTypes{
	"GlobalReference",
	"ModelReference",
}

func (v *ReferenceTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReferenceTypes(value)
	for _, existing := range AllowedReferenceTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReferenceTypes", value)
}

// NewReferenceTypesFromValue returns a pointer to a valid ReferenceTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReferenceTypesFromValue(v string) (*ReferenceTypes, error) {
	ev := ReferenceTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReferenceTypes: valid values are %v", v, AllowedReferenceTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReferenceTypes) IsValid() bool {
	for _, existing := range AllowedReferenceTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReferenceTypes value
func (v ReferenceTypes) Ptr() *ReferenceTypes {
	return &v
}

type NullableReferenceTypes struct {
	value *ReferenceTypes
	isSet bool
}

func (v NullableReferenceTypes) Get() *ReferenceTypes {
	return v.value
}

func (v *NullableReferenceTypes) Set(val *ReferenceTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceTypes(val *ReferenceTypes) *NullableReferenceTypes {
	return &NullableReferenceTypes{value: val, isSet: true}
}

func (v NullableReferenceTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
