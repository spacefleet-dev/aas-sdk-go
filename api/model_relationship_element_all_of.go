//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// RelationshipElementAllOf struct for RelationshipElementAllOf
type RelationshipElementAllOf struct {
	First  Reference `json:"first"`
	Second Reference `json:"second"`
}

// NewRelationshipElementAllOf instantiates a new RelationshipElementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipElementAllOf(first Reference, second Reference) *RelationshipElementAllOf {
	this := RelationshipElementAllOf{}
	this.First = first
	this.Second = second
	return &this
}

// NewRelationshipElementAllOfWithDefaults instantiates a new RelationshipElementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipElementAllOfWithDefaults() *RelationshipElementAllOf {
	this := RelationshipElementAllOf{}
	return &this
}

// GetFirst returns the First field value
func (o *RelationshipElementAllOf) GetFirst() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.First
}

// GetFirstOk returns a tuple with the First field value
// and a boolean to check if the value has been set.
func (o *RelationshipElementAllOf) GetFirstOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.First, true
}

// SetFirst sets field value
func (o *RelationshipElementAllOf) SetFirst(v Reference) {
	o.First = v
}

// GetSecond returns the Second field value
func (o *RelationshipElementAllOf) GetSecond() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.Second
}

// GetSecondOk returns a tuple with the Second field value
// and a boolean to check if the value has been set.
func (o *RelationshipElementAllOf) GetSecondOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Second, true
}

// SetSecond sets field value
func (o *RelationshipElementAllOf) SetSecond(v Reference) {
	o.Second = v
}

func (o RelationshipElementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["first"] = o.First
	}
	if true {
		toSerialize["second"] = o.Second
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipElementAllOf struct {
	value *RelationshipElementAllOf
	isSet bool
}

func (v NullableRelationshipElementAllOf) Get() *RelationshipElementAllOf {
	return v.value
}

func (v *NullableRelationshipElementAllOf) Set(val *RelationshipElementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipElementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipElementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipElementAllOf(val *RelationshipElementAllOf) *NullableRelationshipElementAllOf {
	return &NullableRelationshipElementAllOf{value: val, isSet: true}
}

func (v NullableRelationshipElementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipElementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
