//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// StateOfEvent the model 'StateOfEvent'
type StateOfEvent string

// List of StateOfEvent
const (
	STATEOFEVENT_OFF StateOfEvent = "OFF"
	STATEOFEVENT_ON  StateOfEvent = "ON"
)

// All allowed values of StateOfEvent enum
var AllowedStateOfEventEnumValues = []StateOfEvent{
	"OFF",
	"ON",
}

func (v *StateOfEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StateOfEvent(value)
	for _, existing := range AllowedStateOfEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StateOfEvent", value)
}

// NewStateOfEventFromValue returns a pointer to a valid StateOfEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStateOfEventFromValue(v string) (*StateOfEvent, error) {
	ev := StateOfEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StateOfEvent: valid values are %v", v, AllowedStateOfEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StateOfEvent) IsValid() bool {
	for _, existing := range AllowedStateOfEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateOfEvent value
func (v StateOfEvent) Ptr() *StateOfEvent {
	return &v
}

type NullableStateOfEvent struct {
	value *StateOfEvent
	isSet bool
}

func (v NullableStateOfEvent) Get() *StateOfEvent {
	return v.value
}

func (v *NullableStateOfEvent) Set(val *StateOfEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableStateOfEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableStateOfEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateOfEvent(val *StateOfEvent) *NullableStateOfEvent {
	return &NullableStateOfEvent{value: val, isSet: true}
}

func (v NullableStateOfEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateOfEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
