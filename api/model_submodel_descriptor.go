//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SubmodelDescriptor struct for SubmodelDescriptor
type SubmodelDescriptor struct {
	Administration *AdministrativeInformation `json:"administration,omitempty"`
	Category       NullableString             `json:"category,omitempty"`
	Description    []LangString               `json:"description,omitempty"`
	Endpoints      []IEndpoint                `json:"endpoints,omitempty"`
	IdShort        NullableString             `json:"idShort,omitempty"`
	Identification *Identifier                `json:"identification,omitempty"`
	ModelType      *ModelType                 `json:"modelType,omitempty"`
	SemanticId     *Reference                 `json:"semanticId,omitempty"`
}

// NewSubmodelDescriptor instantiates a new SubmodelDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmodelDescriptor() *SubmodelDescriptor {
	this := SubmodelDescriptor{}
	return &this
}

// NewSubmodelDescriptorWithDefaults instantiates a new SubmodelDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmodelDescriptorWithDefaults() *SubmodelDescriptor {
	this := SubmodelDescriptor{}
	return &this
}

// GetAdministration returns the Administration field value if set, zero value otherwise.
func (o *SubmodelDescriptor) GetAdministration() AdministrativeInformation {
	if o == nil || o.Administration == nil {
		var ret AdministrativeInformation
		return ret
	}
	return *o.Administration
}

// GetAdministrationOk returns a tuple with the Administration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmodelDescriptor) GetAdministrationOk() (*AdministrativeInformation, bool) {
	if o == nil || o.Administration == nil {
		return nil, false
	}
	return o.Administration, true
}

// HasAdministration returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasAdministration() bool {
	if o != nil && o.Administration != nil {
		return true
	}

	return false
}

// SetAdministration gets a reference to the given AdministrativeInformation and assigns it to the Administration field.
func (o *SubmodelDescriptor) SetAdministration(v AdministrativeInformation) {
	o.Administration = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmodelDescriptor) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmodelDescriptor) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *SubmodelDescriptor) SetCategory(v string) {
	o.Category.Set(&v)
}

// SetCategoryNil sets the value for Category to be an explicit nil
func (o *SubmodelDescriptor) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *SubmodelDescriptor) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmodelDescriptor) GetDescription() []LangString {
	if o == nil {
		var ret []LangString
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmodelDescriptor) GetDescriptionOk() ([]LangString, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given []LangString and assigns it to the Description field.
func (o *SubmodelDescriptor) SetDescription(v []LangString) {
	o.Description = v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmodelDescriptor) GetEndpoints() []IEndpoint {
	if o == nil {
		var ret []IEndpoint
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmodelDescriptor) GetEndpointsOk() ([]IEndpoint, bool) {
	if o == nil || o.Endpoints == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasEndpoints() bool {
	if o != nil && o.Endpoints != nil {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []IEndpoint and assigns it to the Endpoints field.
func (o *SubmodelDescriptor) SetEndpoints(v []IEndpoint) {
	o.Endpoints = v
}

// GetIdShort returns the IdShort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubmodelDescriptor) GetIdShort() string {
	if o == nil || o.IdShort.Get() == nil {
		var ret string
		return ret
	}
	return *o.IdShort.Get()
}

// GetIdShortOk returns a tuple with the IdShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubmodelDescriptor) GetIdShortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdShort.Get(), o.IdShort.IsSet()
}

// HasIdShort returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasIdShort() bool {
	if o != nil && o.IdShort.IsSet() {
		return true
	}

	return false
}

// SetIdShort gets a reference to the given NullableString and assigns it to the IdShort field.
func (o *SubmodelDescriptor) SetIdShort(v string) {
	o.IdShort.Set(&v)
}

// SetIdShortNil sets the value for IdShort to be an explicit nil
func (o *SubmodelDescriptor) SetIdShortNil() {
	o.IdShort.Set(nil)
}

// UnsetIdShort ensures that no value is present for IdShort, not even an explicit nil
func (o *SubmodelDescriptor) UnsetIdShort() {
	o.IdShort.Unset()
}

// GetIdentification returns the Identification field value if set, zero value otherwise.
func (o *SubmodelDescriptor) GetIdentification() Identifier {
	if o == nil || o.Identification == nil {
		var ret Identifier
		return ret
	}
	return *o.Identification
}

// GetIdentificationOk returns a tuple with the Identification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmodelDescriptor) GetIdentificationOk() (*Identifier, bool) {
	if o == nil || o.Identification == nil {
		return nil, false
	}
	return o.Identification, true
}

// HasIdentification returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasIdentification() bool {
	if o != nil && o.Identification != nil {
		return true
	}

	return false
}

// SetIdentification gets a reference to the given Identifier and assigns it to the Identification field.
func (o *SubmodelDescriptor) SetIdentification(v Identifier) {
	o.Identification = &v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *SubmodelDescriptor) GetModelType() ModelType {
	if o == nil || o.ModelType == nil {
		var ret ModelType
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmodelDescriptor) GetModelTypeOk() (*ModelType, bool) {
	if o == nil || o.ModelType == nil {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasModelType() bool {
	if o != nil && o.ModelType != nil {
		return true
	}

	return false
}

// SetModelType gets a reference to the given ModelType and assigns it to the ModelType field.
func (o *SubmodelDescriptor) SetModelType(v ModelType) {
	o.ModelType = &v
}

// GetSemanticId returns the SemanticId field value if set, zero value otherwise.
func (o *SubmodelDescriptor) GetSemanticId() Reference {
	if o == nil || o.SemanticId == nil {
		var ret Reference
		return ret
	}
	return *o.SemanticId
}

// GetSemanticIdOk returns a tuple with the SemanticId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmodelDescriptor) GetSemanticIdOk() (*Reference, bool) {
	if o == nil || o.SemanticId == nil {
		return nil, false
	}
	return o.SemanticId, true
}

// HasSemanticId returns a boolean if a field has been set.
func (o *SubmodelDescriptor) HasSemanticId() bool {
	if o != nil && o.SemanticId != nil {
		return true
	}

	return false
}

// SetSemanticId gets a reference to the given Reference and assigns it to the SemanticId field.
func (o *SubmodelDescriptor) SetSemanticId(v Reference) {
	o.SemanticId = &v
}

func (o SubmodelDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Administration != nil {
		toSerialize["administration"] = o.Administration
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Endpoints != nil {
		toSerialize["endpoints"] = o.Endpoints
	}
	if o.IdShort.IsSet() {
		toSerialize["idShort"] = o.IdShort.Get()
	}
	if o.Identification != nil {
		toSerialize["identification"] = o.Identification
	}
	if o.ModelType != nil {
		toSerialize["modelType"] = o.ModelType
	}
	if o.SemanticId != nil {
		toSerialize["semanticId"] = o.SemanticId
	}
	return json.Marshal(toSerialize)
}

type NullableSubmodelDescriptor struct {
	value *SubmodelDescriptor
	isSet bool
}

func (v NullableSubmodelDescriptor) Get() *SubmodelDescriptor {
	return v.value
}

func (v *NullableSubmodelDescriptor) Set(val *SubmodelDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmodelDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmodelDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmodelDescriptor(val *SubmodelDescriptor) *NullableSubmodelDescriptor {
	return &NullableSubmodelDescriptor{value: val, isSet: true}
}

func (v NullableSubmodelDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmodelDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
