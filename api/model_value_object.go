//lint:file-ignore * Autogenerated code
/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ValueObject struct for ValueObject
type ValueObject struct {
	Value     *string    `json:"value,omitempty"`
	ValueId   *Reference `json:"valueId,omitempty"`
	ValueType *string    `json:"valueType,omitempty"`
}

// NewValueObject instantiates a new ValueObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueObject() *ValueObject {
	this := ValueObject{}
	return &this
}

// NewValueObjectWithDefaults instantiates a new ValueObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueObjectWithDefaults() *ValueObject {
	this := ValueObject{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ValueObject) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueObject) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ValueObject) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ValueObject) SetValue(v string) {
	o.Value = &v
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *ValueObject) GetValueId() Reference {
	if o == nil || o.ValueId == nil {
		var ret Reference
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueObject) GetValueIdOk() (*Reference, bool) {
	if o == nil || o.ValueId == nil {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *ValueObject) HasValueId() bool {
	if o != nil && o.ValueId != nil {
		return true
	}

	return false
}

// SetValueId gets a reference to the given Reference and assigns it to the ValueId field.
func (o *ValueObject) SetValueId(v Reference) {
	o.ValueId = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *ValueObject) GetValueType() string {
	if o == nil || o.ValueType == nil {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueObject) GetValueTypeOk() (*string, bool) {
	if o == nil || o.ValueType == nil {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *ValueObject) HasValueType() bool {
	if o != nil && o.ValueType != nil {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *ValueObject) SetValueType(v string) {
	o.ValueType = &v
}

func (o ValueObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueId != nil {
		toSerialize["valueId"] = o.ValueId
	}
	if o.ValueType != nil {
		toSerialize["valueType"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}

type NullableValueObject struct {
	value *ValueObject
	isSet bool
}

func (v NullableValueObject) Get() *ValueObject {
	return v.value
}

func (v *NullableValueObject) Set(val *ValueObject) {
	v.value = val
	v.isSet = true
}

func (v NullableValueObject) IsSet() bool {
	return v.isSet
}

func (v *NullableValueObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueObject(val *ValueObject) *NullableValueObject {
	return &NullableValueObject{value: val, isSet: true}
}

func (v NullableValueObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
