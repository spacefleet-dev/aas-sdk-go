/*
BaSyx Asset Administration Shell Repository HTTP REST-API

The full description of the generic BaSyx Asset Administration Shell Repository HTTP REST-API

API version: v1
Contact: constantin.ziesche@bosch.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ValueReferencePair struct for ValueReferencePair
type ValueReferencePair struct {
	Value   string    `json:"value"`
	ValueId Reference `json:"valueId"`
}

// NewValueReferencePair instantiates a new ValueReferencePair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueReferencePair(value string, valueId Reference) *ValueReferencePair {
	this := ValueReferencePair{}
	this.Value = value
	this.ValueId = valueId
	return &this
}

// NewValueReferencePairWithDefaults instantiates a new ValueReferencePair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueReferencePairWithDefaults() *ValueReferencePair {
	this := ValueReferencePair{}
	return &this
}

// GetValue returns the Value field value
func (o *ValueReferencePair) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ValueReferencePair) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ValueReferencePair) SetValue(v string) {
	o.Value = v
}

// GetValueId returns the ValueId field value
func (o *ValueReferencePair) GetValueId() Reference {
	if o == nil {
		var ret Reference
		return ret
	}

	return o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value
// and a boolean to check if the value has been set.
func (o *ValueReferencePair) GetValueIdOk() (*Reference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueId, true
}

// SetValueId sets field value
func (o *ValueReferencePair) SetValueId(v Reference) {
	o.ValueId = v
}

func (o ValueReferencePair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["valueId"] = o.ValueId
	}
	return json.Marshal(toSerialize)
}

type NullableValueReferencePair struct {
	value *ValueReferencePair
	isSet bool
}

func (v NullableValueReferencePair) Get() *ValueReferencePair {
	return v.value
}

func (v *NullableValueReferencePair) Set(val *ValueReferencePair) {
	v.value = val
	v.isSet = true
}

func (v NullableValueReferencePair) IsSet() bool {
	return v.isSet
}

func (v *NullableValueReferencePair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueReferencePair(val *ValueReferencePair) *NullableValueReferencePair {
	return &NullableValueReferencePair{value: val, isSet: true}
}

func (v NullableValueReferencePair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueReferencePair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
